[
    {
        "title": "36. API Confirmation",
        "content": "\u003cp\u003eYou are provided with an array of API URLs, where the position of each URL in the array indicates the priority of its respective API. The task involves fetching these APIs concurrently and obtaining the result from the highest-priority API that returns a successful response. Should all the API calls result in failure, it\u0026#8217;s essential to manage the rejection appropriately.\u003c/p\u003e\n\u003cp\u003eConsider the following example of API URLs:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehttps://api.example.com/api1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttps://api.example.com/api2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttps://api.example.com/api3\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe objective is to execute these API requests in parallel and secure the result from the API with the highest priority (earliest in the array) that successfully responds. In scenarios where every API call is unsuccessful, the system must adeptly handle the collective failure.\u003c/p\u003e\n",
        "slug": "api-confirmation",
        "date": "2024-03-15T17:50:10",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/jVk5KQvCgQc?si=DudfjRtqvFcxHaMg"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "86. API Retry",
        "content": "\u003cp\u003eImplement an asynchronous function \u003ccode\u003eretryApiCall\u003c/code\u003e that attempts to call a given API function and retries a specified number of times if the call fails or does not return a successful response (status code 200). The function should wait for a given interval between retries.\u003c/p\u003e\n\u003cp\u003eThe function should accept the following parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eapiFunction\u003c/code\u003e: A function that makes the API call and returns a promise.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emaxRetries\u003c/code\u003e: The maximum number of retries allowed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eretryInterval\u003c/code\u003e: The interval (in milliseconds) to wait between retries.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFunction Signature:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003easync function retryApiCall(apiFunction: () =\u003e Promise\u003cany\u003e, maxRetries: number, retryInterval: number): Promise\u003cany\u003e\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst fetchData = async () =\u003e {\r\n    // Simulated API call\r\n    return fetch('https://example.com/data');\r\n};\r\n\r\nretryApiCall(fetchData, 3, 1000)\r\n    .then(response =\u003e console.log('Data:', response))\r\n    .catch(error =\u003e console.error('Failed to fetch data:', error));\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEnsure that the function correctly handles retries, waiting the specified interval between attempts, and throws an error if the maximum number of retries is reached without a successful response.\u003c/p\u003e\n",
        "slug": "api-retry",
        "date": "2024-03-18T23:01:26",
        "featuredImage": null,
        "info": {
            "company": [
                "Atlassian"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "37. API Search and Render Image",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-10-02-at-5.10.24-PM-300x290.png\" alt=\"\" width=\"300\" height=\"290\" class=\"alignnone size-medium wp-image-383\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-10-02-at-5.10.24-PM-300x290.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-10-02-at-5.10.24-PM.png 532w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eDevelop a basic React user interface that accomplishes the following tasks:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFetches data from an external API.\u003c/li\u003e\n\u003cli\u003eRenders a header image using the first item from the API\u0026#8217;s response.\u003c/li\u003e\n\u003cli\u003eDisplays a list of results, each with a title and a button.\u003c/li\u003e\n\u003cli\u003eIncludes a search input field to filter through the list items based on the title.\u003c/li\u003e\n\u003cli\u003eAllows users to update the main header image by clicking a button associated with each list item.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis UI challenge focuses on implementing core React functionalities, including state management with \u003ccode\u003euseState\u003c/code\u003e, side effects with \u003ccode\u003euseEffect\u003c/code\u003e, componentization, and event handling. Styling is not a primary concern for this task, but the functionality to filter results and update the main image based on user interaction is crucial.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample Interaction:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e1. Upon loading, the UI fetches data from the API and displays the first image as the main header image.\r\n2. A list of titles is displayed below the header image, each with a corresponding \"Click Me\" button.\r\n3. The user can type in the search field to filter the list of titles.\r\n4. Clicking on a \"Click Me\" button next to a title updates the header image to that of the clicked item's image.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task assesses your ability to handle data fetching, state management, and dynamic rendering in React, which are essential skills for frontend development.\u003c/p\u003e\n",
        "slug": "api-search-and-render-image",
        "date": "2024-03-16T22:24:43",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "69. Animate Element To The Right",
        "content": "\u003cp\u003eWrite a function that animates an HTML element to move towards the right by a specified distance over a given duration. The function should utilize the \u003ccode\u003erequestAnimationFrame\u003c/code\u003e method to ensure smooth animation.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eInput:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eelementID\u003c/code\u003e: \u0026#8216;hello\u0026#8217;\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edistance\u003c/code\u003e: 400\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eduration\u003c/code\u003e: 1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExpected Output:\u003c/p\u003e\n\u003cp\u003eThe element with the ID \u0026#8216;hello\u0026#8217; should gradually move 400 pixels to the right over a duration of 1000 milliseconds.\u003c/p\u003e\n",
        "slug": "request-animation-frame",
        "date": "2024-03-15T16:01:25",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/Ko9J4T8MY-M"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "8. Array Methods",
        "content": "\u003cp\u003eJavaScript arrays come with a set of powerful built-in methods like \u003ccode\u003emap()\u003c/code\u003e, \u003ccode\u003efilter()\u003c/code\u003e, and \u003ccode\u003ereduce()\u003c/code\u003e that are essential for manipulating array elements. The task is to recreate these methods, named \u003ccode\u003emyMap()\u003c/code\u003e, \u003ccode\u003emyFilter()\u003c/code\u003e, and \u003ccode\u003emyReduce()\u003c/code\u003e, by adding them to the \u003ccode\u003eArray.prototype\u003c/code\u003e. These custom methods should mimic the functionality of their native counterparts, enabling similar operations on arrays without using the built-in methods.\u003c/p\u003e\n\u003cp\u003eHere is a brief overview of what each method should accomplish:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003emyMap(callback):\u003c/strong\u003e This method should create a new array populated with the results of calling a provided function on every element in the calling array.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emyFilter(callback):\u003c/strong\u003e It should create a new array with all elements that pass the test implemented by the provided function.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emyReduce(callback, initialValue):\u003c/strong\u003e This method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value, starting from \u003ccode\u003einitialValue\u003c/code\u003e if provided.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese custom methods are not only a great way to understand how JavaScript\u0026#8217;s built-in array methods work under the hood but also serve as an excellent exercise in enhancing one\u0026#8217;s ability to extend native JavaScript objects in a meaningful way.\u003c/p\u003e\n",
        "slug": "custom-javascript-array-methods-mymap-myfilter-myreduce",
        "date": "2024-03-12T00:13:31",
        "featuredImage": null,
        "info": {
            "company": [
                "Amazon",
                "Robinhood",
                "Zillow",
                "Netflix",
                "LinkedIn",
                "Stripe",
                "Snap",
                "Vimeo"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "38. Asynchronous Request Queue",
        "content": "\u003cp\u003eYou are tasked with creating an asynchronous request queue in JavaScript. The primary objective is to ensure that each request in the queue is executed sequentially, adhering to the order in which they were added to the queue. The execution of a subsequent request should commence only after the completion of the preceding one. Your challenge involves developing a function named \u003ccode\u003erequestQueue\u003c/code\u003e, which accepts an array of request promises as input and returns a promise that resolves to an array containing the results of these requests, maintaining the sequence of their execution.\u003c/p\u003e\n\u003cp\u003eConsider the following example of requests:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst requests = [ \r\n  fetch('https://api.example.com/data/1'), \r\n  fetch('https://api.example.com/data/2'), \r\n  fetch('https://api.example.com/data/3') \r\n];\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output should be an array containing the results of the requests, in the order they were executed:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\r\n  // Result of the first request\r\n  { /* data for request 1 */ },\r\n  // Result of the second request\r\n  { /* data for request 2 */ },\r\n  // Result of the third request\r\n  { /* data for request 3 */ }\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe \u003ccode\u003erequestQueue\u003c/code\u003e function is crucial for scenarios where the order of request execution and completion is paramount, ensuring that each request is given due consideration in a sequential manner.\u003c/p\u003e\n",
        "slug": "asynchronous-request-queue",
        "date": "2024-03-15T18:00:22",
        "featuredImage": null,
        "info": {
            "company": [
                "Google",
                "Robinhood"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/wOmQoeiZlQw?si=YHlqvUvege5x-FXe"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "39. Auto Suggest Search List",
        "content": "\u003carticle\u003e\n\u003csection\u003e\n\u003cp\u003eImplement an autocomplete feature that enhances user experience by suggesting possible completions for a search term as it is being typed into an HTML input field. This functionality should dynamically filter and display a list of suggestions based on the current input value, offering keyboard navigation to select from the filtered results.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eTask Overview\u003c/h2\u003e\n\u003cp\u003eYour task is to write a JavaScript function that integrates with an HTML input field, monitoring the user\u0026#8217;s input. As the user types, the function should interact with a predefined endpoint (simulated by an object in this case) that returns a list of potential matches. These matches should then be displayed as a list of suggestions beneath the input field, updating in real time with each keystroke to reflect the current query.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eFeatures and Behavior\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe autocomplete should dynamically filter search results to include only items matching the current input, disregarding case sensitivity.\u003c/li\u003e\n\u003cli\u003eThe displayed results should update as the user types, with each keystroke refining the list of suggestions.\u003c/li\u003e\n\u003cli\u003eKeyboard navigation (e.g., using the arrow keys) should allow the user to browse through the list of suggestions and select a result to fill in the search field.\u003c/li\u003e\n\u003cli\u003eEach suggestion in the list should be selectable, and clicking on a suggestion or pressing \u0026#8216;Enter\u0026#8217; when highlighted should populate the input field with that value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eExample\u003c/h2\u003e\n\u003cp\u003eConsider an input field where a user starts typing \u0026#8220;Al\u0026#8221;. The autocomplete feature should filter the list of names to show only those that contain \u0026#8220;Al\u0026#8221;, such as \u0026#8220;Alex\u0026#8221; and \u0026#8220;Aleksandra\u0026#8221;, beneath the input field as selectable suggestions.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
        "slug": "auto-complete-search",
        "date": "2024-03-16T17:50:13",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "40. Autocomplete Search List",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-08-20-at-5.38.01-PM-283x300.png\" alt=\"\" width=\"283\" height=\"300\" class=\"alignnone size-medium wp-image-340\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-08-20-at-5.38.01-PM-283x300.png 283w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-08-20-at-5.38.01-PM.png 477w\" sizes=\"(max-width: 283px) 100vw, 283px\" /\u003e\u003c/p\u003e\n\u003cp\u003eDevelop an autocomplete search suggestion feature that dynamically displays search suggestions to users as they type in a search query. This feature fetches search results from an API endpoint and displays them as suggestions in real-time. Selected results are displayed separately, enhancing user experience and interaction.\u003c/p\u003e\n\u003cp\u003eThe functionality is akin to what you might find in popular search engines, where suggestions appear as you type, based on the current input. This not only makes the search process more efficient but also provides users with a glimpse of what information is available even before they complete typing their query.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput Examples:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUser types: \u0026#8220;ph\u0026#8221; \u003cbr /\u003eExpected Output: Display a list of search suggestions related to \u0026#8220;phone.\u0026#8221;\u003c/li\u003e\n\u003cli\u003eUser types: \u0026#8220;lap\u0026#8221; \u003cbr /\u003eExpected Output: Display a list of search suggestions related to \u0026#8220;laptop.\u0026#8221;\u003c/li\u003e\n\u003cli\u003eUser types: \u0026#8220;app\u0026#8221; \u003cbr /\u003eExpected Output: Display a list of search suggestions related to \u0026#8220;apparel.\u0026#8221;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis task involves handling user input in real-time, querying an API for search results based on this input, and then displaying these results as clickable suggestions. When a user selects a suggestion, it should be displayed separately to indicate selection.\u003c/p\u003e\n\u003cp\u003ePlease use \u003ccode\u003ehttps://dummyjson.com/products/search?q=yourkeyword\u003c/code\u003e endpoint to fetch results\u003c/p\u003e\n\u003cp\u003eThe completion of this feature involves understanding and handling asynchronous operations, DOM manipulation, and event handling in JavaScript. It is a practical and commonly implemented feature in many web applications, making it an essential skill for frontend developers.\u003c/p\u003e\n",
        "slug": "autocomplete-search-list",
        "date": "2024-03-16T19:55:52",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "9. Build Promise",
        "content": "\u003cp class=\"mt-3\"\u003eYou are tasked with implementing a custom Promise class in JavaScript, mimicking the behavior of the native Promise. This includes handling asynchronous operations, chaining methods, and error management.\u003c/p\u003e\n\u003cp class=\"mt-3\"\u003eYour implementation should support the basic promise methods: \u003ccode\u003ethen\u003c/code\u003e, \u003ccode\u003ecatch\u003c/code\u003e, and the constructor should take an executor function with \u003ccode\u003eresolve\u003c/code\u003e and \u003ccode\u003ereject\u003c/code\u003e parameters.\u003c/p\u003e\n\u003cp\u003eHere\u0026#8217;s an example of how your custom Promise might be used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst promise = new MyPromise((resolve, reject) =\u0026gt; {\r\n  setTimeout(() =\u0026gt; resolve(\"Success!\"), 1000);\r\n});\r\npromise.then(value =\u0026gt; console.log(value));\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ePlease make sure to include a method called \u003ccode\u003egetState()\u003c/code\u003e that returns the STATE to pass all unit tests.\u003c/p\u003e\n",
        "slug": "build-custom-promise-javascript",
        "date": "2024-02-19T21:03:30",
        "featuredImage": null,
        "info": {
            "company": [
                "Google",
                "Robinhood",
                "Zillow",
                "Netflix"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/w9plxTCGAVE"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "7. ClassNames",
        "content": "\u003cp\u003eThe \u003ccode\u003eclassnames\u003c/code\u003e utility function is a powerful tool in frontend development, used to dynamically construct a string of CSS class names based on certain conditions. This function simplifies the process of conditionally adding classes to HTML elements, making the code more readable and maintainable.\u003c/p\u003e\n\u003cp\u003eYour task is to implement the \u003ccode\u003eclassnames\u003c/code\u003e function in JavaScript. This function should accept any number of arguments, where each argument can be a class name or a condition that determines whether a class name should be included. The function should process these arguments and return a single string containing all class names that meet their respective conditions, separated by spaces.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\n// If isActive is true and isError is false, \r\n// buttonClasses should be: 'btn btn-active'\r\nconst buttonClasses = classnames(\r\n    'btn',\r\n    isActive \u0026amp; \u0026amp; 'btn-active',\r\n    isError \u0026amp;\u0026amp; 'btn-error'\r\n);\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example demonstrates how the \u003ccode\u003eclassnames\u003c/code\u003e function allows for flexible and conditional class name assignment based on the \u003ccode\u003eisActive\u003c/code\u003e and \u003ccode\u003eisError\u003c/code\u003e conditions. Implementing this function will enhance your ability to manage dynamic styling in your web applications.\u003c/p\u003e\n",
        "slug": "classnames",
        "date": "2024-03-15T21:28:11",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "41. ClearAllIntervals()",
        "content": "\u003cp\u003eImagine you\u0026#8217;re working with JavaScript\u0026#8217;s \u003ccode\u003ewindow.setInterval()\u003c/code\u003e function, which is commonly used to schedule tasks for future execution. Your challenge is to not only utilize \u003ccode\u003esetInterval\u003c/code\u003e effectively but also to create a function named \u003ccode\u003eclearAllIntervals()\u003c/code\u003e. This function should be capable of clearing all active interval timers, proving especially useful for cleaning up pending tasks before a page transition.\u003c/p\u003e\n\u003cp\u003eConsider the scenario where multiple functions are scheduled to execute after a delay, as illustrated in the example below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esetInterval(func1, 10000); \r\nsetInterval(func2, 10000); \r\nsetInterval(func3, 10000); // All three functions are scheduled for execution after a 10-second delay\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe task is to implement the \u003ccode\u003eclearAllIntervals()\u003c/code\u003e function such that calling it cancels all previously scheduled tasks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclearAllIntervals(); // Cancels all scheduled tasks\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis challenge tests your ability to manipulate and work with timers in a frontend environment effectively. You are required to maintain the interface of \u003ccode\u003ewindow.setInterval\u003c/code\u003e and \u003ccode\u003ewindow.clearInterval\u003c/code\u003e but are allowed to augment their underlying logic to incorporate the functionality of \u003ccode\u003eclearAllIntervals()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis task not only assesses your proficiency with JavaScript timers but also your capacity to design clean and efficient solutions for managing asynchronous tasks in web applications.\u003c/p\u003e\n",
        "slug": "clearallintervals",
        "date": "2024-03-15T16:56:24",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "42. ClearAllTimeouts()",
        "content": "\u003cp\u003eImagine you\u0026#8217;re tasked with scheduling tasks for future execution in a frontend environment, utilizing the \u003ccode\u003ewindow.setTimeout()\u003c/code\u003e function. Your challenge doesn\u0026#8217;t stop there; you must also create a function named \u003ccode\u003eclearAllTimeout()\u003c/code\u003e. This function should be capable of clearing all active timers, ensuring a clean slate of pending tasks, particularly useful during page transitions.\u003c/p\u003e\n\u003cp\u003eConsider the scenario where you\u0026#8217;ve scheduled multiple functions for execution after a 10-second delay:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003esetTimeout(func1, 10000);\r\nsetTimeout(func2, 10000);\r\nsetTimeout(func3, 10000); // All three functions are set to execute after 10 seconds.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe requirement is to halt all these scheduled tasks with a single call to \u003ccode\u003eclearAllTimeout()\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclearAllTimeout(); // This call should cancel all previously scheduled tasks.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour solution must adhere to the existing interface of \u003ccode\u003ewindow.setTimeout\u003c/code\u003e and \u003ccode\u003ewindow.clearTimeout\u003c/code\u003e, but you are encouraged to redefine their underlying implementations. This exercise will test your ability to manipulate timers efficiently in a frontend development context, showcasing your skills in managing asynchronous tasks.\u003c/p\u003e\n\u003cp\u003eThrough this challenge, you\u0026#8217;ll demonstrate not only your proficiency in using JavaScript timers but also your innovative approach to enhancing and controlling their behavior to suit specific application needs.\u003c/p\u003e\n",
        "slug": "clearalltimeouts",
        "date": "2024-03-15T16:46:25",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "43. Compose Function",
        "content": "\u003cp\u003eYou are tasked with implementing a \u003ccode\u003ecompose\u003c/code\u003e function that combines multiple single-argument functions into a single function. This composite function should apply the given functions in sequence to an initial value, transforming it step by step.\u003c/p\u003e\n\u003cp\u003eGiven three functions \u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, and \u003ccode\u003ec\u003c/code\u003e, each performing a distinct mathematical operation on an input value, your \u003ccode\u003ecompose\u003c/code\u003e function should enable these functions to be applied in the order they are provided.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFunction \u003ccode\u003ea\u003c/code\u003e: Multiplies the input by 4.\u003c/li\u003e\n\u003cli\u003eFunction \u003ccode\u003eb\u003c/code\u003e: Adds 4 to the input.\u003c/li\u003e\n\u003cli\u003eFunction \u003ccode\u003ec\u003c/code\u003e: Subtracts 1 from the input.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStarting with an initial value of 5, the \u003ccode\u003ecompose\u003c/code\u003e function should return the final result after sequentially applying these functions. Therefore, \u003ccode\u003ecompose(a, b, c)(5)\u003c/code\u003e should yield 23, following these steps:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eApply \u003ccode\u003ea\u003c/code\u003e to 5: \u003ccode\u003ea(5) = 5 * 4 = 20\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eApply \u003ccode\u003eb\u003c/code\u003e to 20: \u003ccode\u003eb(20) = 20 + 4 = 24\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eApply \u003ccode\u003ec\u003c/code\u003e to 24: \u003ccode\u003ec(24) = 24 - 1 = 23\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThis example illustrates the transformation process, demonstrating how each function modifies the value passed through the composition.\u003c/p\u003e\n\u003cp\u003eYour implementation should allow for any number of functions to be composed, providing a flexible and powerful tool for function chaining and value transformation.\u003c/p\u003e\n",
        "slug": "compose-function",
        "date": "2024-03-12T15:23:58",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "11. Create DOM",
        "content": "\u003cp\u003eYou are tasked to build a \u003ccode\u003ecreateDom\u003c/code\u003e function, which is designed to dynamically create Document Object Model (DOM) elements or a tree of elements based on a structured definition provided by a root object. This root object might represent a simple text node or a more elaborate construct with nested elements, each potentially endowed with its own attributes and children.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecreateDom\u003c/code\u003e function aims to facilitate the programmatic construction of DOM elements for the dynamic generation of web content. It is capable of:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreating simple text nodes by enclosing them within a paragraph element when the root is a string.\u003c/li\u003e\n\u003cli\u003eGenerating complex elements as defined by an object, which specifies the type of element (tag name), attributes (like class, id, etc.), and children (which can be additional elements or text).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\n// Define a complex structure for the DOM\r\nconst root = {\r\n    type: 'div',\r\n    attributes: { class: 'container' },\r\n    children: [\r\n        { type: 'h1', children: ['Title'] },\r\n        { type: 'p', children: ['This is a paragraph.'] }\r\n    ]\r\n};\r\n\r\n// Utilize createDom to construct the DOM based on the defined structure\r\nconst dom = createDom(root);\r\n\r\n// Append the newly created DOM to the document body or another DOM element\r\ndocument.body.appendChild(dom);\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis approach empowers developers to dynamically generate and update web page content programmatically, based on data or user interactions, enhancing the flexibility and interactivity of web applications.\u003c/p\u003e\n",
        "slug": "create-dom",
        "date": "2024-03-12T16:49:03",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "44. Curry Function",
        "content": "\u003cp\u003eThe goal is to implement a \u003ccode\u003ecurry\u003c/code\u003e function in JavaScript that allows a function to be called with arguments one at a time until all arguments have been provided, after which the original function is executed with all of the accumulated arguments. This technique is particularly useful in functional programming where functions are treated as first-class citizens and can be composed or chained together.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecurry\u003c/code\u003e function takes a callback as an argument and returns a new function. This new function can be called multiple times, each with a single argument, until no arguments are provided, at which point the original callback function is executed with all of the previously provided arguments.\u003c/p\u003e\n\u003cp\u003eUsage Example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst curriedSum = curry((a, b, c) =\u003e a + b + c);\r\nconsole.log(curriedSum(1)(2)(3)()); // Outputs: 6\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example defines a \u003ccode\u003ecurriedSum\u003c/code\u003e function that adds three numbers together. The \u003ccode\u003ecurry\u003c/code\u003e function enables \u003ccode\u003ecurriedSum\u003c/code\u003e to be called with one argument at a time, and finally, an empty call triggers the execution of the sum operation with all the provided arguments.\u003c/p\u003e\n\u003cp\u003eThis approach offers flexibility in how functions receive their arguments, enabling more dynamic and functional programming patterns.\u003c/p\u003e\n",
        "slug": "curry-function",
        "date": "2024-03-12T15:10:48",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "45. Custom “this” Methods",
        "content": "\u003cp\u003eYou are tasked with creating custom implementations of three essential methods found in the Function prototype: \u003ccode\u003emyCall\u003c/code\u003e, \u003ccode\u003emyApply\u003c/code\u003e, and \u003ccode\u003emyBind\u003c/code\u003e. These methods are designed to emulate the functionality of JavaScript\u0026#8217;s native \u003ccode\u003eFunction.prototype.call\u003c/code\u003e, \u003ccode\u003eFunction.prototype.apply\u003c/code\u003e, and \u003ccode\u003eFunction.prototype.bind\u003c/code\u003e methods, respectively. This challenge provides a deep dive into handling function context (`this`) and arguments in JavaScript, which is crucial for function execution and object-oriented programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003emyCall\u003c/code\u003e method should enable a function to be invoked with a specified `this` context and individual arguments, mirroring the behavior of \u003ccode\u003eFunction.prototype.call\u003c/code\u003e. The \u003ccode\u003emyApply\u003c/code\u003e method, on the other hand, should allow a function to be called with an array of arguments, akin to \u003ccode\u003eFunction.prototype.apply\u003c/code\u003e. Finally, the \u003ccode\u003emyBind\u003c/code\u003e method is expected to return a new function that, when called at a later time, will have its `this` context and initial arguments preset, resembling \u003ccode\u003eFunction.prototype.bind\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eImplementing these custom methods not only showcases the flexibility and dynamism of JavaScript but also serves as a valuable exercise in understanding the core mechanics of function execution and context binding. By crafting \u003ccode\u003emyCall\u003c/code\u003e, \u003ccode\u003emyApply\u003c/code\u003e, and \u003ccode\u003emyBind\u003c/code\u003e from the ground up, you will gain a deeper insight into these fundamental aspects of JavaScript and enhance your problem-solving skills for various programming challenges.\u003c/p\u003e\n",
        "slug": "this-methods",
        "date": "2024-03-12T01:24:51",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Robinhood",
                "Zillow",
                "Airbnb",
                "OpenAI",
                "Microsoft",
                "Netflix",
                "Apple",
                "LinkedIn",
                "Stripe",
                "ClickUp",
                "PayPal",
                "Snap",
                "Vimeo",
                "Adobe",
                "TikTok",
                "Atlassian"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "74. Debounce I",
        "content": "\u003cp\u003eYou are tasked with implementing a \u003ccode\u003edebounce\u003c/code\u003e function in JavaScript, an essential technique in improving the performance of web applications by limiting the rate at which a function is executed. This function is particularly useful in scenarios where some code should not run until after a certain amount of time has elapsed since the last time it was invoked, such as during window resizing, scrolling, or real-time form validation.\u003c/p\u003e\n\u003ch3\u003eFunctionality Requirements:\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003edebounce\u003c/code\u003e function should accept a callback function, a delay in milliseconds, and an optional boolean parameter \u003ccode\u003eimmediate\u003c/code\u003e. It returns a new function that, when invoked repeatedly, will only execute the callback after the specified delay has passed since the last invocation. If the \u003ccode\u003eimmediate\u003c/code\u003e parameter is set to \u003ccode\u003etrue\u003c/code\u003e, the callback should be executed immediately on the first call, but subsequent calls should be debounced until there is a pause in invocation for at least the delay period.\u003c/p\u003e\n\u003ch3\u003eBehavioral Specifications:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003eimmediate\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e (default), the callback is executed after the delay period if no subsequent calls are made within that delay.\u003c/li\u003e\n\u003cli\u003eIf \u003ccode\u003eimmediate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, the callback is executed immediately on the first call, but subsequent calls are debounced until the delay period has elapsed without any new calls.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eTechnical Considerations:\u003c/h3\u003e\n\u003cp\u003eUse a timer to track the delay period and ensure that the callback function\u0026#8217;s execution is postponed until the delay passes without any new invocation of the returned function. Carefully manage the timer to handle immediate execution logic and reset the timer as needed to ensure correct function behavior.\u003c/p\u003e\n\u003cp\u003eThis implementation of the \u003ccode\u003edebounce\u003c/code\u003e function will enhance your application\u0026#8217;s responsiveness and efficiency by preventing code from executing too frequently under rapid event firing, such as typing in a search input or resizing a window.\u003c/p\u003e\n",
        "slug": "debounce-i",
        "date": "2024-03-09T17:37:30",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Robinhood",
                "Zillow",
                "Airbnb",
                "OpenAI",
                "Microsoft",
                "Netflix",
                "Apple",
                "LinkedIn",
                "Stripe",
                "ClickUp",
                "PayPal",
                "Snap",
                "Vimeo",
                "Adobe",
                "TikTok"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/6uB4a7igDP4"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "46. Debounce II",
        "content": "\u003cp\u003eImplement a JavaScript utility called \u003ccode\u003edebounce\u003c/code\u003e that enhances the control over function executions in response to rapid or repeated triggers. This utility should accept two parameters: a target function (\u003ccode\u003efunc\u003c/code\u003e) and a wait time in milliseconds (\u003ccode\u003ewait\u003c/code\u003e). The \u003ccode\u003edebounce\u003c/code\u003e function returns a new, debounced version of the target function that ensures it is only executed after the specified wait time has elapsed since its last invocation.\u003c/p\u003e\n\u003cp\u003eIf the debounced function is called again before the wait time has expired, the countdown is reset, delaying the function\u0026#8217;s execution until the wait time passes without any further invocations. This behavior is crucial in scenarios such as handling rapid user inputs, window resizing, or scroll events, where controlling the rate of function execution can significantly enhance performance and user experience.\u003c/p\u003e\n\u003cp\u003eIn addition to the basic debouncing behavior, the returned function includes two methods for added flexibility:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ecancel():\u003c/strong\u003e Cancels any scheduled execution of the debounced function, effectively resetting the debounce mechanism.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eflush():\u003c/strong\u003e Immediately invokes the debounced function if there is a scheduled execution pending, bypassing the wait time.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis advanced debouncing mechanism, with its \u003ccode\u003ecancel\u003c/code\u003e and \u003ccode\u003eflush\u003c/code\u003e capabilities, provides a powerful tool for optimizing dynamic function execution in response to user actions or system events.\u003c/p\u003e\n",
        "slug": "debounce-ii",
        "date": "2024-03-12T00:22:04",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "47. Debounce III",
        "content": "\u003cp\u003eThe goal is to implement an advanced version of the \u003ccode\u003edebounce()\u003c/code\u003e function in JavaScript, which introduces an \u003ccode\u003eoptions\u003c/code\u003e parameter. This parameter contains two properties: \u003ccode\u003eleading\u003c/code\u003e and \u003ccode\u003etrailing\u003c/code\u003e, both of which are boolean flags.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eleading\u003c/code\u003e flag determines if the debounced function should execute immediately on the first call. When \u003ccode\u003etrue\u003c/code\u003e, the function triggers right away; otherwise, it waits for the specified delay. The \u003ccode\u003etrailing\u003c/code\u003e flag, on the other hand, controls the execution of the function after the delay. If \u003ccode\u003etrue\u003c/code\u003e, the function executes after the delay; if \u003ccode\u003efalse\u003c/code\u003e, it does not.\u003c/p\u003e\n\u003cp\u003eBy default, the debounce function behaves traditionally, with \u003ccode\u003e{leading: false, trailing: true}\u003c/code\u003e. This task involves creating a debounce mechanism that adapts to these options, providing flexibility in function execution timing. This adaptation is crucial for optimizing event handling and response strategies in various scenarios.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e Consider a sequence of function calls with corresponding delays. The enhanced debounced function should execute these calls based on the configured \u003ccode\u003eleading\u003c/code\u003e and \u003ccode\u003etrailing\u003c/code\u003e options, potentially reducing the number of invocations for efficiency.\u003c/p\u003e\n\u003cp\u003eNote: In testing environments, especially browsers, the accuracy of \u003ccode\u003esetTimeout()\u003c/code\u003e and \u003ccode\u003eclearTimeout()\u003c/code\u003e might not be reliable. Thus, alternative implementations should be considered for evaluating the debounced function\u0026#8217;s behavior.\u003c/p\u003e\n",
        "slug": "debounce-iii",
        "date": "2024-03-12T00:52:18",
        "featuredImage": null,
        "info": {
            "company": [
                "Google",
                "Microsoft"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "13. Deep Clone",
        "content": "\u003cp\u003eImplement a function \u003ccode\u003edeepClone\u003c/code\u003e that takes an object as input and returns a deep copy of it. Unlike a shallow copy, which only copies the outermost layer, a deep copy replicates every level of nested objects. This means that changes made to the nested objects in the cloned object do not affect the original object.\u003c/p\u003e\n\u003cp\u003eThis function is crucial in scenarios where you need to manipulate data while preserving the original structure for future use. Deep cloning is a common requirement in frontend development, especially in state management, where immutability is a key concept.\u003c/p\u003e\n\u003cp\u003eConsider the following object as an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst source = {\r\n    a: 10,\r\n    b: 20,\r\n    c: {\r\n        d: 30,\r\n        e: ['a', 'b', 1],\r\n        f: {\r\n            g: 1\r\n        }\r\n    }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour task is to create a \u003ccode\u003edeepClone\u003c/code\u003e function that accurately duplicates this structure, including all nested objects and arrays. Changes to any level of the cloned object should not impact the original object.\u003c/p\u003e\n\u003cp\u003eHere\u0026#8217;s a basic usage example where changes to the cloned object do not affect the original:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst obj = { role: 'foo' };\r\nconst clonedObj = deepClone(obj);\r\nclonedObj.role = 'bar';\r\nconsole.log(obj.role); // Output: 'foo'\r\nconsole.log(clonedObj.role); // Output: 'bar'\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe challenge involves understanding and applying recursion for objects within objects, ensuring each level is appropriately cloned.\u003c/p\u003e\n\u003cp\u003eThis problem tests your ability to work with references in JavaScript, a fundamental concept in ensuring data integrity and preventing unintended side effects in your applications.\u003c/p\u003e\n",
        "slug": "javascript-deep-clone-frontend-interview-question",
        "date": "2024-03-10T18:32:59",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "48. Deep Equals",
        "content": "\u003cp\u003eImplement a \u003ccode\u003edeepEquals\u003c/code\u003e function capable of comparing two inputs, which can vary widely in type and structure, including null, undefined, objects, arrays, NaN, and primitives (such as numbers, strings, and booleans). The function should accurately determine whether the two inputs are deeply equal, meaning they are structurally identical and contain the same values at every level of nesting.\u003c/p\u003e\n\u003cp\u003eThe challenge lies in handling the nuanced differences between JavaScript data types and their comparisons. For instance:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComparing \u003ccode\u003eNaN\u003c/code\u003e values, which by default are not equal to themselves.\u003c/li\u003e\n\u003cli\u003eDistinguishing between different types of falsy values, such as \u003ccode\u003enull\u003c/code\u003e and \u003ccode\u003eundefined\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEnsuring that arrays and objects are compared recursively, delving into each element or property to verify equality.\u003c/li\u003e\n\u003cli\u003eCorrectly handling primitive data types, ensuring strict equality.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples of expected behavior:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edeepEquals(NaN, NaN) // true\r\ndeepEquals([1, 2, [3]], [1, 2, [3]]) // true\r\ndeepEquals({ a: 1, b: { c: 2 } }, { a: 1, b: { c: 2 } }) // true\r\ndeepEquals(null, undefined) // false\r\ndeepEquals([1, 2, 3], { 0: 1, 1: 2, 2: 3 }) // false\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function is not only a powerful tool for JavaScript developers to accurately compare complex structures but also serves as an excellent exercise in understanding JavaScript\u0026#8217;s type coercion and equality comparisons.\u003c/p\u003e\n",
        "slug": "deep-equals-comparison",
        "date": "2024-03-12T00:00:47",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/PUmNzgIhdPA"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "14. Event Emitter",
        "content": "\u003cp\u003eIn modern application development, the asynchronous event-driven architecture plays a crucial role, especially in handling operations where the response time is uncertain. This architecture allows for a decoupled system where objects (emitters) can emit events at any time, and function objects (listeners) respond to these events as they are triggered.\u003c/p\u003e\n\u003cp\u003eThe challenge here is to implement an \u003ccode\u003eEventEmitter\u003c/code\u003e class that encapsulates this behavior. The class should provide mechanisms to:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eEmit events:\u003c/strong\u003e Trigger an event by name, executing all callbacks subscribed to this event.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSubscribe to events:\u003c/strong\u003e Allow functions to listen for specific events and respond when those events are emitted. Each subscription should provide a way to release (unsubscribe) itself to avoid memory leaks and unintended behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe \u003ccode\u003eEventEmitter\u003c/code\u003e class should work as follows:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eclass EventEmitter {\r\n  constructor() {\r\n    this.events = {};\r\n  }\r\n\r\n  subscribe(eventName, callback) {\r\n    // Logic to add a listener for the event\r\n  }\r\n\r\n  emit(eventName, ...args) {\r\n    // Logic to trigger an event and call all subscribed listeners\r\n  }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWith this setup, you can create an instance of \u003ccode\u003eEventEmitter\u003c/code\u003e, subscribe functions to listen for named events, and emit those events at any point in your application. This approach is fundamental in creating non-blocking, asynchronous flows and is at the heart of many JavaScript frameworks and libraries.\u003c/p\u003e\n\u003cp\u003eThis task will test your ability to work with higher-order functions, callbacks, and the principles of event-driven programming. Implementing the \u003ccode\u003eEventEmitter\u003c/code\u003e class will deepen your understanding of these concepts, which are pivotal in modern JavaScript development.\u003c/p\u003e\n",
        "slug": "javascript-event-emitter-guide",
        "date": "2024-03-12T15:07:17",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "49. Event Emitter II",
        "content": "\u003cp\u003eImplement an \u003ccode\u003eEventEmitter\u003c/code\u003e class in JavaScript that allows for subscribing to events, emitting events, and unsubscribing from events. This problem is categorized as medium difficulty and is commonly encountered in interviews for companies like Meta. Understanding event handling and the observer pattern is crucial for frontend developers, making this challenge both relevant and instructive.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eEventEmitter\u003c/code\u003e class should have the following functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eon(name, callback):\u003c/strong\u003e Registers an event listener for the specified event \u003ccode\u003ename\u003c/code\u003e. This method should return an object with an \u003ccode\u003eoff\u003c/code\u003e method, which when called, removes the listener.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eemit(name, \u0026#8230;args):\u003c/strong\u003e Triggers the specified event \u003ccode\u003ename\u003c/code\u003e and calls all the registered callbacks with the provided arguments.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYour implementation should allow for the dynamic addition and removal of event listeners, ensuring that event callbacks are executed in the order they were added. The \u003ccode\u003eemit\u003c/code\u003e method should return \u003ccode\u003etrue\u003c/code\u003e if the event has listeners and was successfully emitted, or \u003ccode\u003efalse\u003c/code\u003e otherwise.\u003c/p\u003e\n\u003cp\u003eExample usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst emitter = new EventEmitter();\r\nvar sum = 0;\r\nfunction addTwoNumbers(a, b) {\r\n  sum = a + b;\r\n}\r\nconst sub = emitter.on('foo', addTwoNumbers);\r\nemitter.emit('foo', 2, 5); // Triggers addTwoNumbers, expecting sum = 7\r\nconsole.log(sum); // Output: 7\r\n\r\nsub.off(); // Unsubscribe the addTwoNumbers listener from 'foo' event\r\nemitter.emit('foo', -3, 9); // Since addTwoNumbers is unsubscribed, sum remains unchanged\r\nconsole.log(sum); // Output: 7\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task assesses your ability to work with classes, callbacks, and advanced JavaScript concepts such as closures and the observer pattern. Successfully implementing an \u003ccode\u003eEventEmitter\u003c/code\u003e demonstrates a deep understanding of event-driven programming, a key aspect of many JavaScript applications.\u003c/p\u003e\n",
        "slug": "advanced-event-emitter-implementation-javascript",
        "date": "2024-03-12T01:21:40",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "50. Event Logger I",
        "content": "\u003cp\u003eYou are tasked with developing a part of an Event Logger system, specifically focusing on the feature that sends requests and logs events with a configurable delay. The goal is to simulate the behavior of sending requests to a server and logging the events, including the time elapsed since the initialization of the logger. The system should allow for a delay in logging to mimic network latency or processing time, and it should also provide functionality to abort a logging request.\u003c/p\u003e\n\u003cp\u003eThe requirements for this part of the Event Logger system are as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInitialize a start time that serves as a reference point for calculating the elapsed time for each event logged.\u003c/li\u003e\n\u003cli\u003eProvide a function to set a delay for the logging of events, simulating network latency or processing time.\u003c/li\u003e\n\u003cli\u003eInclude a function to reset the delay to zero, effectively removing any simulated latency.\u003c/li\u003e\n\u003cli\u003eImplement a function to send logging requests. Each request should log the event with the specified delay, and include the elapsed time since the logger\u0026#8217;s initialization.\u003c/li\u003e\n\u003cli\u003eEquip each logging request with the capability to be aborted, in which case the event should be logged immediately with an \u0026#8220;[ABORTED]\u0026#8221; tag.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample usage:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e// Initialize the logger\r\n_initializeStartTime();\r\n\r\n// Set a simulated delay of 500ms for logging events\r\n_setFetchResponseDelay(500);\r\n\r\n// Send a logging request\r\nconst logRequest = sendRequest({ event: 'UserLogin', details: 'User logged in successfully' });\r\n\r\n// Optionally, the logging request can be aborted\r\n// logRequest.abort();\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output should include the logged events with their respective elapsed times and indicate whether they were aborted.\u003c/p\u003e\n",
        "slug": "event-logger-i",
        "date": "2024-03-15T18:16:57",
        "featuredImage": null,
        "info": {
            "company": [
                "Robinhood"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "51. Event Logger II",
        "content": "\u003cp\u003eIn this continuation of the Event Logger series, your task is to enhance the Event Logger system by integrating it with a user interface that generates events based on user interactions. Specifically, you\u0026#8217;ll work with a grid of colored squares. Each time a square is clicked, an event should be logged, capturing essential details such as the event name, timestamp, and the color of the clicked square.\u003c/p\u003e\n\u003cp\u003eThe core functionality should be encapsulated within an \u003ccode\u003eEventLogger\u003c/code\u003e class. This class is responsible for batching events and sending them off at specified intervals, rather than sending each event immediately. This approach is crucial for optimizing performance and reducing network load, especially in scenarios with frequent user interactions.\u003c/p\u003e\n\u003cp\u003eThe requirements for \u0026#8220;Event Logger II\u0026#8221; include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eImplement an \u003ccode\u003eEventLogger\u003c/code\u003e class that batches events and sends them at defined intervals.\u003c/li\u003e\n\u003cli\u003eEach square in the provided grid should be clickable, with each click generating a loggable event.\u003c/li\u003e\n\u003cli\u003eThe logged event should include details such as the event name (e.g., \u0026#8220;click\u0026#8221;), the timestamp of the interaction, and the color of the square that was clicked.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eEventLogger\u003c/code\u003e should temporarily store events in a queue and only send them once the batch interval has elapsed, ensuring that events are sent in batches rather than individually.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample HTML structure for the grid of squares:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"grid\"\u0026gt;\r\n  \u0026lt;div class=\"square\" style=\"background-color: #ff5000;\"\u0026gt;\u0026lt;/div\u0026gt;\r\n  \u0026lt;!-- Additional squares follow --\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThrough \u0026#8220;Event Logger II,\u0026#8221; you\u0026#8217;ll demonstrate the ability to handle user-generated events in a performant manner, leveraging batch processing to efficiently log and send event data.\u003c/p\u003e\n",
        "slug": "event-logger-ii",
        "date": "2024-03-15T19:02:45",
        "featuredImage": null,
        "info": {
            "company": [
                "Robinhood"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "15. Event Target",
        "content": "\u003cp\u003eYou are tasked with building an \u003ccode\u003eEventTarget\u003c/code\u003e class in JavaScript, structured to efficiently handle events. This class is fundamental for registering event listeners, removing these listeners, and dispatching events to the registered listeners.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eEventTarget\u003c/code\u003e class should encapsulate three primary methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eaddEventListener(name, callback):\u003c/strong\u003e Utilized to register event listeners. Whenever an event with the specified name is dispatched, the corresponding callback functions are invoked. This method should prevent the addition of duplicate callback functions for the same event.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eremoveEventListener(name, callback):\u003c/strong\u003e Employed to deregister a previously added event listener. If the specified callback is located within the event\u0026#8217;s callback list, it should be removed. Should the callback list become empty as a result, the event should be completely removed from the class\u0026#8217;s registry.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003edispatchEvent(name):\u003c/strong\u003e Used to trigger events. It executes all callback functions associated with the provided event name.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst et = new EventTarget();\r\net.addEventListener('click', () =\u003e console.log('Clicked!'));\r\net.dispatchEvent('click'); // Output: \"Clicked!\"\r\net.removeEventListener('click', () =\u003e console.log('Clicked!'));\r\net.dispatchEvent('click'); // No output, as the listener has been removed.\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis \u003ccode\u003eEventTarget\u003c/code\u003e implementation offers a streamlined and adaptable approach to managing events within event-driven programming paradigms, allowing for the dynamic addition and removal of event handlers and the capability to programmatically initiate events.\u003c/p\u003e\n",
        "slug": "eventtarget",
        "date": "2024-03-12T15:02:41",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "80. Fake Timer",
        "content": "\u003cp\u003eCreate a \u003ccode\u003eFakeTimer\u003c/code\u003e class that can be used to replace the native JavaScript timing functions (\u003ccode\u003esetTimeout\u003c/code\u003e, \u003ccode\u003eclearTimeout\u003c/code\u003e, and \u003ccode\u003eDate.now\u003c/code\u003e) with a controllable fake version. This allows for the simulation and testing of time-dependent code without the need for actual time to elapse, making it ideal for tests and simulations where precise timing control is required.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eFakeTimer\u003c/code\u003e class should provide the following functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInstall:\u003c/strong\u003e Replace the native timing functions with fake ones that queue callbacks instead of executing them after a real delay.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUninstall:\u003c/strong\u003e Restore the original timing functions to their native implementations.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTick:\u003c/strong\u003e Manually advance the fake timer, executing any callbacks that should be triggered up to the current simulated time.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eUsage Example:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst timer = new FakeTimer();\r\ntimer.install();\r\n// Schedule a timeout\r\nconst id = setTimeout(() =\u003e console.log('Timeout called'), 100);\r\n// Advance the fake timer\r\ntimer.tick();\r\n// 'Timeout called' is logged to the console\r\ntimer.uninstall();  // Restore original functions\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis feature is particularly useful in unit testing, where real-time waiting is impractical. It allows for precise control over the execution timing of callbacks, enabling more deterministic and faster tests.\u003c/p\u003e\n",
        "slug": "build-fake-timer",
        "date": "2024-03-18T21:50:07",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "85. FeatureFlag",
        "content": "\u003cp\u003eCreate a \u003ccode\u003eFeatureFlag\u003c/code\u003e class that manages feature flags in a web application. Feature flags are a powerful technique in software development, allowing developers to enable or disable certain features dynamically, often used for testing new features, A/B testing, or enabling features for specific users or environments.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eFeatureFlag\u003c/code\u003e class should provide the functionality to check if specific features are enabled or disabled based on stored flags. It should also include a method to retrieve feature flags from local storage, simulating the fetching of feature configurations from a persistent storage or a remote configuration service.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eClass Requirements:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA constructor that initializes the feature flags.\u003c/li\u003e\n\u003cli\u003eA private method \u003ccode\u003e_fetchFeatures\u003c/code\u003e that simulates fetching feature flags from local storage and populates the \u003ccode\u003efeatures\u003c/code\u003e object.\u003c/li\u003e\n\u003cli\u003eA method \u003ccode\u003eisEnabled\u003c/code\u003e that accepts an array of feature names and returns an array of objects indicating the enabled status of each feature.\u003c/li\u003e\n\u003cli\u003eAn optional method \u003ccode\u003euseFeatureFlag\u003c/code\u003e similar to \u003ccode\u003eisEnabled\u003c/code\u003e, demonstrating alternative naming or functionality as desired.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst featureFlag = new FeatureFlag();\r\nconsole.log(featureFlag.isEnabled(['feature', 'feature2']));\r\n// Output: [{feature: true}, {feature2: false}]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe class should handle cases where local storage might not be accessible due to browser restrictions or privacy settings, defaulting to an empty configuration in such cases.\u003c/p\u003e\n",
        "slug": "build-feature-flag",
        "date": "2024-03-18T22:51:43",
        "featuredImage": null,
        "info": {
            "company": [
                "Atlassian"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "52. File Navigation",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-2.34.32-PM-262x300.png\" alt=\"\" width=\"262\" height=\"300\" class=\"alignnone size-medium wp-image-363\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-2.34.32-PM-262x300.png 262w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-2.34.32-PM.png 632w\" sizes=\"(max-width: 262px) 100vw, 262px\" /\u003e\u003c/p\u003e\n\u003cp\u003eIn this React-based problem, we are tasked with managing a nested directory structure where each directory can be either opened to reveal its subdirectories or closed to hide them. Additionally, users must be able to add new files to any directory within this structure.\u003c/p\u003e\n\u003cp\u003eThe core functionalities required for this application include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBeing able to toggle a directory\u0026#8217;s state between open and closed, thereby controlling the visibility of its subdirectories.\u003c/li\u003e\n\u003cli\u003eAdding new files to directories. Each new file should be displayed in the directory\u0026#8217;s list of files once added.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo illustrate, consider the following scenarios:\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth\u003eAction\u003c/th\u003e\n\u003cth\u003eExpected Outcome\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd\u003eClosing a directory\u003c/td\u003e\n\u003ctd\u003eIts subdirectories should be hidden.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eOpening a directory\u003c/td\u003e\n\u003ctd\u003eIts subdirectories should be revealed.\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd\u003eAdding a new file to a directory\u003c/td\u003e\n\u003ctd\u003eThe file should appear in the directory\u0026#8217;s list of files.\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis challenge involves a combination of state management, event handling, and dynamic rendering in React, making it a comprehensive task for testing one\u0026#8217;s understanding of React fundamentals, especially in the context of handling complex, nested structures.\u003c/p\u003e\n",
        "slug": "file-navigation-react",
        "date": "2024-03-16T21:29:20",
        "featuredImage": null,
        "info": {
            "company": [
                "Atlassian"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "3. Filtering Matching JSON",
        "content": "\u003cp\u003eYou are presented with a task involving a dataset represented as an array of objects, where each object delineates a person\u0026#8217;s attributes, such as name, company, position, and level. Additionally, there is a match object specifying criteria to identify matches based on specific attributes. Your challenge is to develop a function, \u003ccode\u003efindMatches\u003c/code\u003e, which filters the dataset to return only the objects that meet all the criteria outlined in the match object.\u003c/p\u003e\n\u003cp\u003eThe core objective is to write a program that, given the dataset and the match object, produces an array containing only the objects that satisfy all the criteria in the match object. For instance:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edata: [\r\n  { name: 'John', company: 'Google', position: 'Software Engineer', level: 'Entry' },\r\n  { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n]\r\nmatch: { position: 'Product Manager', level: 'Entry' }\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\r\n  { name: 'Ann', company: 'Waymo', position: 'Product Manager', level: 'Entry' }\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis exercise tests your ability to manipulate complex data structures and implement effective filtering algorithms, essential skills in data handling and software development. It involves traversing arrays, understanding object properties, and applying logical operations to achieve the desired outcome.\u003c/p\u003e\n",
        "slug": "filtering-matching-json",
        "date": "2024-03-07T16:21:53",
        "featuredImage": null,
        "info": {
            "company": [
                "Robinhood",
                "Apple"
            ],
            "category": [
                "JSON"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/8xOAFXTriUk"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "10. Find Corresponding Node",
        "content": "\u003cp\u003eGiven two identical-structure DOM trees with differing text content, and a specified node in the first tree, your task is to implement a function to identify and return the corresponding node from the second tree. This problem tests your understanding of tree traversal and comparison techniques, making it essential for those interested in data structures and algorithms.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-68\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-at-4.29.55-PM-300x213.png\" alt=\"\" width=\"300\" height=\"213\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-at-4.29.55-PM-300x213.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-06-at-4.29.55-PM.png 540w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n",
        "slug": "find-corresponding-node",
        "date": "2024-03-07T00:34:02",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/ElHeF2zY570"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "82. First Bad Version",
        "content": "\u003cp\u003eSuppose you have \u003ccode\u003en\u003c/code\u003e versions of a product, and you want to find the first version that introduced a bug, causing all the following versions to also be bad. Given a function \u003ccode\u003eisBad\u003c/code\u003e that takes a version number and returns \u003ccode\u003etrue\u003c/code\u003e if the version is bad and \u003ccode\u003efalse\u003c/code\u003e otherwise, implement a function \u003ccode\u003efirstBadVersion\u003c/code\u003e that utilizes a binary search algorithm to efficiently find and return the first bad version.\u003c/p\u003e\n\u003cp\u003eYour function should minimize the number of calls to the \u003ccode\u003eisBad\u003c/code\u003e function. Implement \u003ccode\u003efirstBadVersion\u003c/code\u003e such that it returns a closure which accepts a single integer parameter \u003ccode\u003eversion\u003c/code\u003e, representing the total number of versions, and returns the first bad version number, or \u003ccode\u003e-1\u003c/code\u003e if no bad version is found.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFunction Signature:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction firstBadVersion(isBad: (version: number) =\u003e boolean): (version: number) =\u003e number\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst isBad = (version) =\u003e version \u003e= 4;\r\nconst findFirstBad = firstBadVersion(isBad);\r\nconsole.log(findFirstBad(5));  // Output: 4\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis problem tests your ability to apply binary search in a practical scenario, optimizing for efficiency in terms of time complexity and minimizing the use of resources such as network or database calls.\u003c/p\u003e\n",
        "slug": "first-bad-version",
        "date": "2024-03-18T22:21:33",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "1. Flatten I",
        "content": "\u003cp\u003eWrite a function to flatten a multi-dimensional array into a single-level array. Provide both recursive and iterative solutions.\u003c/p\u003e\n\u003cp\u003eThe problem involves transforming an array that contains nested arrays of various levels into a single-level array. For example, given an input like \u003ccode\u003e[[1, 2, [3]], 4]\u003c/code\u003e, the expected output would be \u003ccode\u003e[1, 2, 3, 4]\u003c/code\u003e. This challenge must be addressed in two distinct manners:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRecursive Approach:\u003c/strong\u003e This method leverages the concept of recursion, where a function calls itself. When the function encounters an element that is an array, it calls itself with this nested array, accumulating all the elements into a single, flattened array. This approach elegantly navigates through the layers of nested arrays, extracting and combining elements into one cohesive structure.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIterative Approach:\u003c/strong\u003e Differing from recursion, the iterative solution utilizes a stack to manage and process the elements. This method iteratively examines each element, and when an array is encountered, its elements are added to the stack to be processed. This continues until all elements are flattened into a single array, ensuring efficient handling without the overhead of recursive function calls.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e Let\u0026#8217;s illustrate the problem and solutions with a concrete example.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: [[1, 2, [3, [4, 5]]], 6]\r\n\r\nRecursive Output: [1, 2, 3, 4, 5, 6]\r\nIterative Output: [1, 2, 3, 4, 5, 6]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task not only tests your understanding of array manipulation but also evaluates your ability to implement solutions using different programming paradigms. Whether you opt for the elegance of recursion or the control of iteration, mastering this challenge will sharpen your problem-solving skills and prepare you for frontend interviews.\u003c/p\u003e\n\u003cp\u003eAs you embark on solving this problem, consider the implications of each approach, including the ease of implementation, efficiency, and potential limitations such as stack overflow in recursion for deeply nested arrays. Good luck!\u003c/p\u003e\n",
        "slug": "flatten-arrays-recursively-and-iteratively",
        "date": "2024-02-26T02:39:16",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Robinhood",
                "Zillow",
                "Airbnb",
                "OpenAI",
                "Microsoft",
                "Netflix"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/UV9Lp-3uwwg?si=sIkEur5qGudwyPgh"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": false,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "17. Flatten II",
        "content": "\u003carticle\u003e\n\u003ch2\u003eFlatten with Depth\u003c/h2\u003e\n\u003cp\u003eImplement a function to flatten a multi-level nested array up to a specified depth. The function should accept two arguments: the array to be flattened (\u003ccode\u003earr\u003c/code\u003e) and the depth of flattening (\u003ccode\u003edepth\u003c/code\u003e). This challenge should be tackled using both recursive and iterative approaches to offer different strategies for achieving the same outcome.\u003c/p\u003e\n\u003ch3\u003eRecursive Solution:\u003c/h3\u003e\n\u003cp\u003eThe recursive approach involves a function that calls itself to flatten each level of nested arrays until the specified depth is reached. If the current item is an array and the depth has not been exceeded, the function recursively flattens this item and concatenates the result. If the item is not an array or the depth has been exceeded, it is added directly to the result. This approach elegantly handles nested arrays by leveraging the call stack, but it\u0026#8217;s essential to manage the depth to avoid excessive recursion that can lead to a stack overflow.\u003c/p\u003e\n\u003ch3\u003eIterative Solution:\u003c/h3\u003e\n\u003cp\u003eThe iterative approach uses a stack to manage the array items. Each item from the input array is processed: if it\u0026#8217;s an array and the depth allows, its items are added to the stack to be processed; otherwise, the item is added to the results. This method iteratively deconstructs the nested arrays without recursion, making it robust for deeply nested structures but potentially more complex to implement and understand.\u003c/p\u003e\n\u003ch3\u003eExample Usage:\u003c/h3\u003e\n\u003cp\u003eConsider an array \u003ccode\u003e[1, [2, [3, [4, 5]]], 6]\u003c/code\u003e with a depth of 2. The expected output would be \u003ccode\u003e[1, 2, 3, [4, 5], 6]\u003c/code\u003e, flattening the array up to two levels deep but leaving any further nesting intact.\u003c/p\u003e\n\u003cp\u003eThis problem tests your ability to manipulate arrays, handle recursion, and implement iterative solutions, all crucial skills for a frontend developer.\u003c/p\u003e\n\u003c/article\u003e\n",
        "slug": "flatten-array-with-depth",
        "date": "2024-03-09T18:45:52",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "54. Flatten III",
        "content": "\u003ch2\u003eFlatten with Prefix\u003c/h2\u003e\n\u003cp\u003eYou are tasked with creating a function, \u003ccode\u003eflattenWithPrefix\u003c/code\u003e, that flattens a nested object. The challenge lies in ensuring that as the object is flattened, the keys in the resulting object are prefixed with their parent keys, joined by periods (\u0026#8216;.\u0026#8217;). This means that for every level of nesting within the original object, its key is concatenated with its parent key(s), creating a clear hierarchical representation of the original nested structure in the flattened object.\u003c/p\u003e\n\u003cp\u003eThis problem presents a common scenario in data manipulation, where nested structures need to be simplified for easier processing or storage, while still retaining a trace of their original hierarchical organization. Such a function can be particularly useful when dealing with configurations, translations, or any data that is naturally hierarchical but needs to be flattened for practical reasons.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: { a: { b: { c: 1 }, d: 2 } }\r\nOutput: { \"a.b.c\": 1, \"a.d\": 2 }\r\n\r\nInput: { x: { y: 10, z: { w: 20 } } }\r\nOutput: { \"x.y\": 10, \"x.z.w\": 20 }\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn these examples, notice how each key in the output object is a string that represents the path to the corresponding value in the input object. The function essentially transforms the nested object into a \u0026#8216;flat\u0026#8217; object where each key-value pair is accessible at the top level, with keys indicating the original nested structure.\u003c/p\u003e\n\u003cp\u003eYour implementation of \u003ccode\u003eflattenWithPrefix\u003c/code\u003e should work for objects of arbitrary depth and complexity, handling all the quirks of object iteration in JavaScript, such as inherited properties. The focus is not just on achieving the task but on writing clean, efficient, and maintainable code that could be integrated into larger codebases.\u003c/p\u003e\n",
        "slug": "flatten-nested-objects-with-prefixes-javascript",
        "date": "2024-03-08T20:40:17",
        "featuredImage": null,
        "info": {
            "company": [
                "Robinhood",
                "Stripe",
                "Snap"
            ],
            "category": [
                "Objects"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "55. Flatten IV",
        "content": "\u003cp\u003eWrite a function to flatten a multi-dimensional object into a single-level object. The function should take an object as input and return a new object where all nested objects are flattened, retaining their key-value pairs at the top level. Each key in the output object should be unique, and the corresponding value should reflect the nested structure of the input object. This task involves recursively exploring each property within the object and aggregating all properties at the root level. Consider the following examples to better understand the expected behavior:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e{ a: 1, b: { c: 2, d: 3, e: { f: null } }, g: 4, h: undefined }\u003c/code\u003e\u003cbr /\u003e\n    \u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e{ a: 1, c: 2, d: 3, f: null, g: 4, h: undefined }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e{ a: { b: { c: 1 }, d: { e: 2, f: 3 } } }\u003c/code\u003e\u003cbr /\u003e\n    \u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e{ c: 1, e: 2, f: 3 }\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e{ a: { b: { c: { d: { e: 1 } } } } }\u003c/code\u003e\u003cbr /\u003e\n    \u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e{ e: 1 }\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe function must ensure that if a key has a value of \u003ccode\u003enull\u003c/code\u003e or \u003ccode\u003eundefined\u003c/code\u003e, it should still be included in the output object. This challenge tests your ability to manipulate object properties and recursively process nested structures, which is a common task in handling JSON data and configuring component states in frontend development.\u003c/p\u003e\n",
        "slug": "flatten-nested-objects",
        "date": "2024-03-10T23:40:24",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Netflix",
                "LinkedIn",
                "ClickUp",
                "TikTok"
            ],
            "category": [
                "Objects"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/uOtTZqTtOMI"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "56. Flatten V",
        "content": "\u003cp\u003eDeveloping a frontend application often involves dealing with complex data structures, particularly when displaying hierarchical lists of items where each item can potentially have children, forming a nested structure. However, for certain UI components or data processing tasks, a flat list representation of these items, preserving their inherent relationships, is more desirable.\u003c/p\u003e\n\u003cp\u003eYour challenge is to implement a function that accepts a nested structure of items as input and returns a flattened array of objects. Each object in the output array should represent an item from the nested structure, stripped of its nesting but retaining the original order of items.\u003c/p\u003e\n\u003cp\u003eConsider the following input examples to understand the expected behavior:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput Example 1:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003econst input1 = [\r\n  {\r\n    \"value\": \"value0\",\r\n    \"children\": []\r\n  },\r\n  // ... other items ...\r\n];\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpected Output for Example 1:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003econst output1 = [\r\n  { \"value\": \"value0\" },\r\n  // ... other items ...\r\n];\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput Example 2:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003econst input2 = [\r\n  {\r\n    \"value\": \"value1\",\r\n    \"children\": [\r\n      {\r\n        \"value\": \"value2\",\r\n        \"children\": [\r\n          {\r\n            \"value\": \"value3\",\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"value\": \"value4\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  // ... other items ...\r\n];\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eExpected Output for Example 2:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003econst output2 = [\r\n  { \"value\": \"value1\" },\r\n  { \"value\": \"value2\" },\r\n  { \"value\": \"value3\" },\r\n  { \"value\": \"value4\" },\r\n  // ... other items ...\r\n];\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task assesses your ability to manipulate complex data structures and simplify them for practical usage in frontend applications. Successfully implementing this function will enhance your skills in data manipulation, recursion (if applicable), and algorithmic thinking.\u003c/p\u003e\n",
        "slug": "flatten-nested-objects-2",
        "date": "2024-03-10T23:53:38",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Microsoft",
                "Netflix",
                "LinkedIn",
                "Snap"
            ],
            "category": [
                "Objects"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "57. Flatten VI",
        "content": "\u003cp\u003eGiven a nested JSON structure, the task is to create two utility functions and one primary function to efficiently process and flatten the structure asynchronously. The functions to be implemented are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003egetBatch:\u003c/strong\u003e This function asynchronously retrieves an item from the input array based on a specified index. It returns a Promise that resolves to the item, facilitating asynchronous item processing. This is particularly useful for handling large datasets without impeding the execution flow.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003egetValueList:\u003c/strong\u003e An asynchronous function that utilizes \u003ccode\u003egetBatch\u003c/code\u003e to fetch items within a specified range (fromIndex to toIndex). It aims to flatten these items into a single-level array of values while preserving the original order found in the nested structure.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe primary challenge lies in the efficient management of asynchronous operations coupled with the maintenance of the correct order of values in the flattened structure.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample Use Case:\u003c/strong\u003e Consider the following input structure, which represents a simplified hierarchical data model akin to a file system or a comment thread, where each item can contain children:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\r\n  {\r\n    \"value\": \"value0\",\r\n    \"children\": []\r\n  },\r\n  {\r\n    \"value\": \"value1\",\r\n    \"children\": [\r\n      {\r\n        \"value\": \"value2\",\r\n        \"children\": [\r\n          {\r\n            \"value\": \"value3\",\r\n            \"children\": []\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"value\": \"value4\",\r\n        \"children\": []\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"value\": \"value5\",\r\n    \"children\": []\r\n  },\r\n  {\r\n    \"value\": \"value6\",\r\n    \"children\": []\r\n  }\r\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe objective is to flatten this structure into a single-level array of values [\u003ccode\u003e\"value0\", \"value1\", \"value2\", \"value3\", \"value4\", \"value5\", \"value6\"\u003c/code\u003e], using asynchronous functions to fetch and process the data efficiently.\u003c/p\u003e\n",
        "slug": "flatten-vi",
        "date": "2024-03-11T16:33:02",
        "featuredImage": null,
        "info": {
            "company": [
                "Atlassian"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "58. Flatten VII",
        "content": "\u003cp\u003eWrite a function named \u003ccode\u003eflatten\u003c/code\u003e that is capable of taking an input which may be an arbitrarily nested object or array, and return a flattened version of it. In the flattened output, all elements from nested arrays should be in a single-level array, and all nested object properties should be brought to the top level of a single object.\u003c/p\u003e\n\u003cp\u003eThe challenge involves creating a versatile function that can handle various types of nested structures, including combinations of arrays and objects, without losing any data in the process. The function should be able to distinguish between objects and arrays and treat them accordingly, ensuring that arrays are merged into a single array and object properties are collated into a single object.\u003c/p\u003e\n\u003cp\u003eConsider the following examples to understand the expected behavior of the function:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGiven an array like \u003ccode\u003e[1, [2, 3], [[4, 5], 6]]\u003c/code\u003e, the function should produce \u003ccode\u003e[1, 2, 3, 4, 5, 6]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor an object such as \u003ccode\u003e{ a: 1, b: { c: 2, d: { e: 3 } } }\u003c/code\u003e, the expected output is \u003ccode\u003e{ a: 1, c: 2, e: 3 }\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWhen the input is a mix of arrays and objects like \u003ccode\u003e[1, { a: 2, b: [3, 4] }, [5, { c: 6 }]]\u003c/code\u003e, the function should return \u003ccode\u003e[1, 2, 3, 4, 5, 6]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor deeply nested arrays such as \u003ccode\u003e[[[[[[[[[[1]]]]]]]]]]\u003c/code\u003e, the output should simply be \u003ccode\u003e[1]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eWhen the input is \u003ccode\u003enull\u003c/code\u003e, the function should return \u003ccode\u003enull\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYour task is to implement the \u003ccode\u003eflatten\u003c/code\u003e function in such a way that it fulfills the above requirements, providing a simple and efficient solution to the problem of dealing with complex, nested data structures. This is a common challenge that developers face, making it a valuable exercise for enhancing your problem-solving skills and understanding of data manipulation.\u003c/p\u003e\n",
        "slug": "flatten-vii",
        "date": "2024-03-11T17:09:14",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Airbnb",
                "Netflix",
                "Apple",
                "Vimeo",
                "Adobe"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/Kt7V9-ls-38"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "59. Flatten XI",
        "content": "\u003cp\u003eWrite a function \u003ccode\u003eflattenWithPrefix(obj, prefix)\u003c/code\u003e that flattens a nested object into a single-level object. Each key in the resulting object should be a concatenation of the keys from the nested object, prefixed with the specified prefix. The function should handle arbitrary levels of nesting.\u003c/p\u003e\n\u003cp\u003eFor example, given the input object:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = { a: { b: { c: 1 }, d: 2 } };\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output, with each key flattened and prefixed, would be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{ 'a.b.c': 1, 'a.d': 2 }\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function should be able to traverse through the nested object, concatenating each key with its parent key(s) and the given prefix, to create a new, flattened object structure where each key represents the \u0026#8220;path\u0026#8221; to its value within the original nested object.\u003c/p\u003e\n",
        "slug": "flatten-xi",
        "date": "2024-03-14T15:36:27",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "81. GetTextBetweenNodes",
        "content": "\u003cp\u003eCreate a function \u003ccode\u003egetTextBetweenTwoNodes\u003c/code\u003e that retrieves all the text content found in the DOM between two specified nodes, \u003ccode\u003enode1\u003c/code\u003e and \u003ccode\u003enode2\u003c/code\u003e. The function should traverse the DOM tree, collecting text from text nodes that are located between these two nodes, and return an array of these text snippets.\u003c/p\u003e\n\u003cp\u003eThe function should consider a depth-first search approach to navigate through the DOM elements, ensuring that all text nodes between the two specified nodes are included. It\u0026#8217;s important to handle various edge cases, such as when the nodes are nested at different levels or when there\u0026#8217;s no direct sibling relationship between them.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFunction Signature:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction getTextBetweenTwoNodes(node1: Node, node2: Node): string[]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst node1 = document.getElementById('start');\r\nconst node2 = document.getElementById('end');\r\nconst textsBetween = getTextBetweenTwoNodes(node1, node2);\r\nconsole.log(textsBetween);  // Output: Array of text snippets between node1 and node2\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis utility can be particularly useful for web scraping, automated testing, or any scenario where understanding the text content between two DOM elements is required.\u003c/p\u003e\n",
        "slug": "get-text-between-nodes",
        "date": "2024-03-18T21:57:53",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "53. Gym Sessions",
        "content": "\u003cp\u003eYou are tasked with developing a function capable of selecting and filtering gym session data based on specific options. Each session is detailed within an array of objects, highlighting the user, duration of the exercise, and the equipment utilized. A crucial feature of this function is its ability to consolidate sessions by the same user, thereby amalgamating their total exercise duration and equipment used.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esessions\u003c/code\u003e: An array of session objects, each containing \u003ccode\u003euser\u003c/code\u003e, \u003ccode\u003eduration\u003c/code\u003e, and \u003ccode\u003eequipment\u003c/code\u003e properties.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e: An object hosting filtering and merging preferences.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eAn array of session objects tailored according to the specified options, inclusive of user-merged data if indicated.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst input = [\r\n  { user: 'User1', duration: 30, equipment: ['treadmill'] },\r\n  { user: 'User2', duration: 45, equipment: ['bike', 'dumbbell'] },\r\n  // additional session objects\r\n];\r\nconst options = { merge: true, equipment: ['bike'] };\r\nconst selectedSessions = selectData(input, options);\r\nconsole.log(selectedSessions);\r\n// Output might resemble:\r\n// [\r\n// { user: 'User2', duration: 45, equipment: ['bike', 'dumbbell'] }\r\n// ]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis function not only demands adeptness in data filtering based on criteria but also challenges you to thoughtfully combine data from multiple entries pertaining to the same individual, ensuring a seamless and informative summary of gym sessions.\u003c/p\u003e\n",
        "slug": "gym-sessions",
        "date": "2024-03-08T23:27:06",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "JSON"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "61. Hierarchical Checkbox",
        "content": "\u003cp\u003eImplement a JavaScript solution to manage checkboxes in a hierarchical structure, ensuring the following functionality:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWhen a parent checkbox is checked, all its child checkboxes should also be checked.\u003c/li\u003e\n\u003cli\u003eWhen a parent checkbox is unchecked, all its child checkboxes should be unchecked.\u003c/li\u003e\n\u003cli\u003eIf some, but not all, child checkboxes are checked, the parent checkbox should be in an indeterminate state.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis problem presents a common scenario in user interfaces where options are nested within categories and subcategories, requiring a coherent and intuitive interaction pattern. The hierarchical structure of checkboxes can represent various real-world scenarios such as selecting features in a product, permissions in a software application, or categories in a content management system.\u003c/p\u003e\n\u003cp\u003eFor example, consider the following HTML structure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;h1\u0026gt;Indeterminate Checkboxes\u0026lt;/h1\u0026gt;\r\n\u0026lt;ul\u0026gt;\r\n    \u0026lt;li\u0026gt;\r\n        \u0026lt;input type=\"checkbox\" name=\"tall\" id=\"tall\"\u0026gt;\r\n        \u0026lt;label for=\"tall\"\u0026gt;Tall Things\u0026lt;/label\u0026gt;\r\n        \u0026lt;ul\u0026gt;\r\n            \u0026lt;li\u0026gt;\r\n                \u0026lt;input type=\"checkbox\" name=\"tall-1\" id=\"tall-1\"\u0026gt;\r\n                \u0026lt;label for=\"tall-1\"\u0026gt;Buildings\u0026lt;/label\u0026gt;\r\n            \u0026lt;/li\u0026gt;\r\n            \u0026lt;li\u0026gt;\r\n                \u0026lt;input type=\"checkbox\" name=\"tall-2\" id=\"tall-2\"\u0026gt;\r\n                \u0026lt;label for=\"tall-2\"\u0026gt;Giants\u0026lt;/label\u0026gt;\r\n                \u0026lt;ul\u0026gt;\r\n                    \u0026lt;li\u0026gt;\r\n                        \u0026lt;input type=\"checkbox\" name=\"tall-2-1\" id=\"tall-2-1\"\u0026gt;\r\n                        \u0026lt;label for=\"tall-2-1\"\u0026gt;Andre\u0026lt;/label\u0026gt;\r\n                    \u0026lt;/li\u0026gt;\r\n                    \u0026lt;li\u0026gt;\r\n                        \u0026lt;input type=\"checkbox\" name=\"tall-2-2\" id=\"tall-2-2\"\u0026gt;\r\n                        \u0026lt;label for=\"tall-2-2\"\u0026gt;Paul Bunyan\u0026lt;/label\u0026gt;\r\n                    \u0026lt;/li\u0026gt;\r\n                \u0026lt;/ul\u0026gt;\r\n            \u0026lt;/li\u0026gt;\r\n            ...\r\n        \u0026lt;/ul\u0026gt;\r\n    \u0026lt;/li\u0026gt;\r\n    ...\r\n\u0026lt;/ul\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this structure, selecting \u0026#8220;Tall Things\u0026#8221; should automatically select \u0026#8220;Buildings,\u0026#8221; \u0026#8220;Giants,\u0026#8221; and all nested options under \u0026#8220;Giants.\u0026#8221; Conversely, deselecting any child option should update the parent\u0026#8217;s state to reflect that not all children are selected, thus showing the parent in an indeterminate state.\u003c/p\u003e\n\u003cp\u003eThis challenge requires a thoughtful approach to event handling and DOM traversal, ensuring that the state of each checkbox is accurately reflected throughout the hierarchy. As you work through this problem, consider the implications of each interaction, aiming for a solution that is both efficient and intuitive for the user.\u003c/p\u003e\n",
        "slug": "hierarchical-checkbox",
        "date": "2024-03-16T21:01:07",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "2. Histogram",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-299\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-05-15-at-6.38.31-PM-300x118.png\" alt=\"\" width=\"300\" height=\"118\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-05-15-at-6.38.31-PM-300x118.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screen-Shot-2023-05-15-at-6.38.31-PM.png 527w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array of numbers. Your task is to write a function \u003ccode\u003ebuildHistogram()\u003c/code\u003e that generates a histogram based on the occurrences of each unique number in the array. The histogram should visually represent the frequency of each number with vertical bars, displaying the count on the left axis.\u003c/p\u003e\n\u003cp\u003eThis challenge involves:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCounting the occurrences of each unique number in the given array.\u003c/li\u003e\n\u003cli\u003eBuilding a histogram where each bar represents the frequency of a unique number.\u003c/li\u003e\n\u003cli\u003eDisplaying the frequency on the left axis of the histogram.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: [2, 4, 5, 2, 3, 4]\r\nHistogram:\r\n4 |      ##\r\n3 |     ####\r\n2 |    ######\r\n1 |   ########\r\n    ---------\r\n     2  3  4  5\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour implementation should dynamically generate the histogram based on the input array, accommodating arrays with varying lengths and ranges of numbers. Consider the visualization aspect of the histogram, ensuring that the bars are proportional and accurately reflect the data\u0026#8217;s distribution.\u003c/p\u003e\n",
        "slug": "histogram",
        "date": "2024-03-16T17:16:17",
        "featuredImage": null,
        "info": {
            "company": [
                "Netflix"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/jSzkUAe4YBc"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": false,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "32. Image Slider",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-376\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.02.18-PM-300x147.png\" alt=\"\" width=\"300\" height=\"147\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.02.18-PM-300x147.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.02.18-PM.png 644w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eCreate a simple image slider component in React to display a set of product images fetched from an API. The slider should enable users to navigate through the images using \u0026#8220;Next\u0026#8221; and \u0026#8220;Previous\u0026#8221; buttons, allowing for smooth transitions between them.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput Examples:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInitial render with fetched product images.\u003c/li\u003e\n\u003cli\u003eClicking the \u0026#8220;Next\u0026#8221; button to move to the next image.\u003c/li\u003e\n\u003cli\u003eClicking the \u0026#8220;Previous\u0026#8221; button to move to the previous image.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExpected Output Examples:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDisplay a set of product images in a slider format.\u003c/li\u003e\n\u003cli\u003eTransition smoothly to the next image when clicking \u0026#8220;Next\u0026#8221;.\u003c/li\u003e\n\u003cli\u003eTransition smoothly to the previous image when clicking \u0026#8220;Previous\u0026#8221;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe implementation should handle fetching product images from an external API, managing the current image index, and enabling smooth transitions between images within the React application.\u003c/p\u003e\n",
        "slug": "image-slider",
        "date": "2024-03-16T21:50:42",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "4. Improve a function",
        "content": "\u003carticle\u003eDevelop a function \u003ccode\u003eexcludeItems\u003c/code\u003e tasked with filtering an array of items by removing those that meet specific exclusion criteria. This function plays a pivotal role in data processing, enabling the refinement of datasets based on dynamic conditions.\u003c/p\u003e\n\u003ch3\u003eFunction Input\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eitems\u003c/strong\u003e (Array of Objects): A collection of items, each represented as an object with various properties such as \u003cem\u003ecolor\u003c/em\u003e, \u003cem\u003etype\u003c/em\u003e, and \u003cem\u003eage\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eexcludes\u003c/strong\u003e (Array of Objects): Criteria for exclusion, with each criterion as an object containing properties \u003cem\u003ek\u003c/em\u003e (the property name to consider for exclusion) and \u003cem\u003ev\u003c/em\u003e (the value of that property leading to exclusion).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eFunction Output\u003c/h3\u003e\n\u003cp\u003eReturns a filtered array comprising items that do not align with the specified exclusion criteria.\u003c/p\u003e\n\u003ch3\u003eExample\u003c/h3\u003e\n\u003cp\u003eConsider the following \u003cem\u003eitems\u003c/em\u003e array and \u003cem\u003eexcludes\u003c/em\u003e criteria:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst items = [\r\n  { color: 'red', type: 'tv', age: 18 },\r\n  { color: 'silver', type: 'phone', age: 20 },\r\n  { color: 'blue', type: 'book', age: 17 }\r\n];\r\n\r\nconst excludes = [\r\n  { k: 'color', v: 'blue' },\r\n  { k: 'type', v: 'phone' }\r\n];\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eExecuting \u003ccode\u003eexcludeItems(items, excludes)\u003c/code\u003e should yield:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[{ color: 'red', type: 'tv', age: 18 }]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis output represents the items array after the exclusion of items with a \u003cem\u003ecolor\u003c/em\u003e of \u0026#8216;blue\u0026#8217; and \u003cem\u003etype\u003c/em\u003e of \u0026#8216;phone\u0026#8217;, based on the specified criteria.\u003c/p\u003e\n\u003ch3\u003eObjective\u003c/h3\u003e\n\u003cp\u003eThe goal is to implement a versatile function capable of sifting through an array of objects and excluding those that meet certain key-value criteria, thus refining the dataset for subsequent processing or analysis.\u003c/p\u003e\n\u003c/article\u003e\n",
        "slug": "improve-a-function",
        "date": "2024-03-14T16:02:57",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/VClupMy84gU"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "63. Infinite Scrolling News Feed",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-348\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-1.49.33-PM-300x208.png\" alt=\"\" width=\"300\" height=\"208\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-1.49.33-PM-300x208.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-1.49.33-PM-768x534.png 768w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-1.49.33-PM.png 924w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou have been tasked with creating a Facebook-like newsfeed that displays user-generated content with infinite scrolling. The application should fetch user data from a mock API endpoint and display it in a feed. As users scroll down the feed, more content should be dynamically loaded, ensuring a seamless user experience.\u003c/p\u003e\n\u003cp\u003eEndpoint: https://dummyjson.com/users?limit=10\u0026amp;skip=1\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFunctional Requirements:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe feed should initially load a set number of posts.\u003c/li\u003e\n\u003cli\u003eAs the user scrolls to the bottom of the feed, more posts should be loaded dynamically.\u003c/li\u003e\n\u003cli\u003eThe application should handle cases where no more data is available to load.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eInput/Output Examples:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e Initial load of the page\u003cbr /\u003e\n\u003cstrong\u003eExpected Output:\u003c/strong\u003e Displays the first set of user-generated content along with a loader element.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e Scroll to the bottom of the feed\u003cbr /\u003e\n\u003cstrong\u003eExpected Output:\u003c/strong\u003e Removes the loader element and appends more user-generated content to the feed.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e Scroll to the bottom of the feed again\u003cbr /\u003e\n\u003cstrong\u003eExpected Output:\u003c/strong\u003e Continues appending additional user-generated content to the feed.\u003c/li\u003e\n\u003c/ul\u003e\n",
        "slug": "build-infinite-scrolling-newsfeed",
        "date": "2024-03-16T20:33:19",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "18. Intersection Observer",
        "content": "\u003cp\u003eYou are tasked with implementing an \u003cstrong\u003eIntersection Observer\u003c/strong\u003e, a utility commonly used in frontend development to detect when an element enters or exits the viewport. Your goal is to create a class that can observe multiple elements on a webpage and trigger a callback function when these elements intersect or stop intersecting with the viewport.\u003c/p\u003e\n\u003cp\u003eThe Intersection Observer you will create should be capable of handling multiple elements simultaneously, monitoring their presence within the viewport. This feature is crucial for implementing lazy loading of images, infinite scrolling, and animations based on scroll position, enhancing user experience and performance.\u003c/p\u003e\n\u003cp\u003eTo illustrate, consider a webpage with multiple sections that become visible only as the user scrolls. Your Intersection Observer should be able to detect when each section comes into view and trigger a specified callback function, allowing for dynamic content loading or animations.\u003c/p\u003e\n\u003cp\u003eHere is a basic example of how your Intersection Observer might be initialized and used:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst observer = new MyIntersectionObserver((entries) =\u0026gt; {\r\n  entries.forEach(entry =\u0026gt; {\r\n    if (entry.isIntersecting) {\r\n      console.log(entry.target, 'has entered the viewport');\r\n    } else {\r\n      console.log(entry.target, 'has exited the viewport');\r\n    }\r\n  });\r\n});\r\n\r\n// Assuming `section1` and `section2` are DOM elements you wish to observe\r\nobserver.observe(section1);\r\nobserver.observe(section2);\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis implementation should efficiently manage and track the elements, ensuring that the callback function is invoked appropriately as elements enter and leave the viewport. Consider the implications of scroll events, element visibility, and the efficient use of resources in your solution.\u003c/p\u003e\n",
        "slug": "intersection-observer",
        "date": "2024-03-15T23:56:44",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/VCkOoDk4a80?si=qhc3jCsMK3b6vgf2"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "87. JSON.stringify",
        "content": "\u003cp\u003eIn this challenge, your task is to create a custom implementation of the \u003ccode\u003eJSON.stringify()\u003c/code\u003e method, which we\u0026#8217;ll call \u003ccode\u003emyStringify\u003c/code\u003e. The \u003ccode\u003eJSON.stringify()\u003c/code\u003e method in JavaScript is used to convert JavaScript objects or values to a JSON string. However, for the sake of this exercise, you\u0026#8217;ll be building your own version to deepen your understanding of how data serialization works in JavaScript.\u003c/p\u003e\n\u003cp\u003eYour function should be able to handle the following data types:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePrimitive types: Number, String, Boolean, null\u003c/li\u003e\n\u003cli\u003eComplex types: Objects, Arrays\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that unlike the native \u003ccode\u003eJSON.stringify()\u003c/code\u003e, your function does not need to worry about circular references, functions, or symbols.\u003c/p\u003e\n\u003cp\u003eHere are some examples to illustrate what your function should do:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\nInput: ['foo', 'bar']\r\nOutput: '[\"foo\", \"bar\"]'\r\n\r\nInput: { name: 'John', age: 30, isEmployed: true }\r\nOutput: '{\"name\": \"John\", \"age\": 30, \"isEmployed\": true}'\r\n\r\nInput: 42\r\nOutput: '42'\r\n\r\nInput: 'Hello, world!'\r\nOutput: '\"Hello, world!\"'\r\n\r\nInput: true\r\nOutput: 'true'\r\n\r\nInput: null\r\nOutput: 'null'\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour implementation should correctly convert arrays and objects to their string representations, ensuring to wrap string values in double quotes and separate object properties with commas. Pay close attention to handling edge cases, such as empty objects or arrays.\u003c/p\u003e\n",
        "slug": "build-your-own-json-stringify",
        "date": "2024-03-20T01:00:37",
        "featuredImage": null,
        "info": {
            "company": [
                "Snap"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "64. K MostText Nodes",
        "content": "\u003cp\u003eGiven a DOM tree representing a webpage and a limit (K), write a function to find the K most frequently appeared text nodes in the webpage. A text node is considered as a string of non-empty characters that are not equal to \u0026#8216;↵\u0026#8217;. Ignore other node types (e.g., element nodes) while counting the frequency. Return an array containing the K most frequent text nodes in descending order of their frequencies.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eConsider the following webpage HTML:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"root\"\u0026gt;\r\n  \u0026lt;p\u0026gt;This is a paragraph.\u0026lt;/p\u0026gt;\r\n  \u0026lt;div\u0026gt;\r\n    \u0026lt;span\u0026gt;This is some text.\u0026lt;/span\u0026gt;\r\n    \u0026lt;p\u0026gt;Another paragraph here.\u0026lt;/p\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n  \u0026lt;p\u0026gt;This is another paragraph.\u0026lt;/p\u0026gt;\r\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eInput:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003etree = DOM tree of the webpage\u003c/li\u003e\n\u003cli\u003elimit = 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe function \u003ccode\u003efindKFrequentWordsInTree(tree, limit)\u003c/code\u003e should analyze the text nodes within the given DOM tree and return the K (3 in this example) most frequently occurring text nodes.\u003c/p\u003e\n\u003cp\u003eThe expected output for this example, assuming the function correctly identifies and counts the frequency of text nodes, might be an array like \u003ccode\u003e['This', 'is', 'a']\u003c/code\u003e, reflecting the most common text nodes within the specified limit.\u003c/p\u003e\n\u003cp\u003eThis task tests your ability to traverse and process DOM trees, count frequency of specific nodes, and return a sorted list of these nodes based on their frequency, which are essential skills for manipulating web page content dynamically.\u003c/p\u003e\n",
        "slug": "k-most-text-nodes",
        "date": "2024-03-14T23:21:10",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "20. Masonry Grid",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-388\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.42.59-PM-300x195.png\" alt=\"\" width=\"300\" height=\"195\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.42.59-PM-300x195.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.42.59-PM-768x499.png 768w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.42.59-PM.png 776w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eCreate a dynamic Masonry layout using Vanilla JavaScript, which organizes a series of items into a grid layout that optimizes space by fitting elements in the optimal position based on available vertical space. This layout should resemble the way stones are laid in a masonry wall, where each item is placed in the shortest column available at the time of placement, creating a staggered effect rather than a uniform grid.\u003c/p\u003e\n\u003cp\u003eYour task is to implement a function that positions each item within a container to achieve the Masonry layout effect. Each item has its own content and height, and the layout should consist of a specified number of columns with a fixed gap between items. The items should be arranged such that they fill up the shortest column available, ensuring that the layout is balanced and the overall height of the grid is minimized.\u003c/p\u003e\n\u003cp\u003eThe implementation should include the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA function to create a new DOM element for each item, setting its class, text content, width, and height.\u003c/li\u003e\n\u003cli\u003eA function to calculate the position of each item and append it to the container, ensuring items are placed in the shortest column to achieve the Masonry effect.\u003c/li\u003e\n\u003cli\u003eConsideration for the number of columns and the gap between items, dynamically adjusting the layout based on the container\u0026#8217;s width.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst items = [\r\n    { content: 'Item 1', height: 150 },\r\n    { content: 'Item 2', height: 100 },\r\n    { content: 'Item 3', height: 120 },\r\n    // more items...\r\n];\r\n\r\n// Expected to create a Masonry layout with the given items inside a container with an id of 'masonry'.\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task assesses your ability to manipulate the DOM using Vanilla JavaScript, handle dynamic layout calculations, and apply creative problem-solving to achieve complex layout patterns without external libraries.\u003c/p\u003e\n",
        "slug": "masonry-grid",
        "date": "2024-03-16T22:32:07",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "84. Math.sqrtRoot",
        "content": "\u003cp\u003eCreate a function \u003ccode\u003emySqrt\u003c/code\u003e that computes and returns the square root of a given number \u003ccode\u003ex\u003c/code\u003e. The function should return the integer part of the square root, similar to how the built-in \u003ccode\u003eMath.sqrt\u003c/code\u003e function works, but without using it directly. Your implementation should use a binary search algorithm to efficiently find the square root.\u003c/p\u003e\n\u003cp\u003eAdditionally, your function should handle edge cases such as negative numbers, non-numeric inputs, and \u003ccode\u003eNaN\u003c/code\u003e by returning \u003ccode\u003eNaN\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eFunction Signature:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction mySqrt(x: number): number\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econsole.log(mySqrt(4));  // Output: 2\r\nconsole.log(mySqrt(8));  // Output: 2 (since the square root of 8 is approximately 2.82842..., and the function returns the integer part)\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe input \u003ccode\u003ex\u003c/code\u003e is guaranteed to be a non-negative number. The function should aim for an efficient solution, ideally with a time complexity of O(log n).\u003c/p\u003e\n",
        "slug": "math-sqrtroot",
        "date": "2024-03-18T22:35:40",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "19. Memoize I",
        "content": "\u003cp\u003eCreate a function \u003ccode\u003ememoize\u003c/code\u003e that enhances the efficiency of function calls by caching the results. Given a callback function and an optional resolver function, \u003ccode\u003ememoize\u003c/code\u003e should return a new function that remembers the results of previous invocations with specific arguments, thereby avoiding redundant calculations for the same inputs.\u003c/p\u003e\n\u003cp\u003eThe returned function, \u003ccode\u003ememoizedFn\u003c/code\u003e, should operate as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt checks if the result for a given set of arguments is already stored in a cache. If so, it returns the cached result instead of executing the callback again.\u003c/li\u003e\n\u003cli\u003eIf the result for the given arguments is not in the cache, \u003ccode\u003ememoizedFn\u003c/code\u003e calls the original callback with those arguments, stores the result in the cache, and then returns the result.\u003c/li\u003e\n\u003cli\u003eThe cache should be a \u003ccode\u003eMap\u003c/code\u003e object where keys represent argument combinations, and values are the callback results for those arguments.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, \u003ccode\u003ememoizedFn\u003c/code\u003e includes methods for cache management:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehas\u003c/code\u003e: Checks if a result for a specific set of arguments is already cached.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edelete\u003c/code\u003e: Removes the cached result for a specific set of arguments.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eclear\u003c/code\u003e: Clears the entire cache.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe optional \u003ccode\u003eresolver\u003c/code\u003e function, if provided, generates a custom key for caching based on the arguments passed to \u003ccode\u003ememoizedFn\u003c/code\u003e. If not provided, the key is generated by stringifying the arguments.\u003c/p\u003e\n\u003cp\u003eThis memoization technique is particularly useful for optimizing performance in applications with heavy computational functions or expensive database queries that are frequently called with the same arguments.\u003c/p\u003e\n",
        "slug": "memoize-i",
        "date": "2024-03-14T15:16:28",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "65. Memoize II",
        "content": "\u003cp\u003eEnhance the \u003ccode\u003ememoize\u003c/code\u003e function by implementing a more sophisticated caching mechanism using a Trie data structure. This approach optimizes memory usage by storing each argument of the memoized function as a node within a Trie, rather than concatenating arguments into a single string key.\u003c/p\u003e\n\u003cp\u003eThe updated \u003ccode\u003ememoize\u003c/code\u003e function should work as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt accepts a function \u003ccode\u003efunc\u003c/code\u003e and returns a new function that caches the results of \u003ccode\u003efunc\u003c/code\u003e based on its arguments.\u003c/li\u003e\n\u003cli\u003eThe cache is represented by a Trie structure, where each node corresponds to an argument of the memoized function.\u003c/li\u003e\n\u003cli\u003eIf the memoized function is called with a set of arguments that has been previously used, the function retrieves the result from the Trie cache instead of executing \u003ccode\u003efunc\u003c/code\u003e again.\u003c/li\u003e\n\u003cli\u003eIf the set of arguments is new, the memoized function executes \u003ccode\u003efunc\u003c/code\u003e, stores the result in the Trie cache, and returns the result.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis approach minimizes memory consumption by avoiding the need to store serialized representations of arguments. Instead, the Trie structure efficiently represents the hierarchical relationship between arguments, making it an ideal choice for caching function results.\u003c/p\u003e\n\u003cp\u003eThe implementation includes two helper classes, \u003ccode\u003eTrieNode\u003c/code\u003e and \u003ccode\u003eTrie\u003c/code\u003e, which provide the necessary structure and methods for the Trie cache, such as \u003ccode\u003eset\u003c/code\u003e, \u003ccode\u003ehas\u003c/code\u003e, and \u003ccode\u003eget\u003c/code\u003e, similar to the Map object.\u003c/p\u003e\n",
        "slug": "memoize-ii",
        "date": "2024-03-14T15:24:58",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "79. Merge Identical API Calls",
        "content": "\u003cp\u003eImplement a function that enhances a given API call function by merging identical calls and caching their responses to optimize network usage. This approach should prevent multiple identical requests from being sent to the server simultaneously, reducing unnecessary network traffic and load on the server.\u003c/p\u003e\n\u003cp\u003eThe function, \u003ccode\u003ecreateGetAPIWithMerging\u003c/code\u003e, takes an API call function \u003ccode\u003egetAPI\u003c/code\u003e as an argument and returns a new function. This new function behaves like \u003ccode\u003egetAPI\u003c/code\u003e but with added capabilities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMerging identical API calls made within a short timeframe.\u003c/li\u003e\n\u003cli\u003eCaching the responses of these calls to serve future identical requests without contacting the server.\u003c/li\u003e\n\u003cli\u003eLimiting the cache size to maintain only the most recent responses, thus managing memory usage effectively.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eUsage Example:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst mergedGetAPI = createGetAPIWithMerging(getAPI);\r\nconst response1 = await mergedGetAPI('/data', { params: { id: 123 } });\r\nconst response2 = await mergedGetAPI('/data', { params: { id: 123 } });  // This call will be merged with the first one if made within 1 second.\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eHere, \u003ccode\u003egetAPI\u003c/code\u003e is the original function for making GET requests. \u003ccode\u003ecreateGetAPIWithMerging\u003c/code\u003e enhances it by caching and merging, ensuring that if multiple identical requests are made in rapid succession, only one will be sent to the server, and its response will be used for all of them.\u003c/p\u003e\n\u003cp\u003eThe cache is automatically managed to contain only a limited number of recent responses and to expire entries after a short period, ensuring the data\u0026#8217;s freshness and limiting memory usage.\u003c/p\u003e\n",
        "slug": "merge-identical-api-calls",
        "date": "2024-03-18T21:44:16",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "21. Navigation",
        "content": "\u003cp\u003eThe given problem involves understanding and explaining a JavaScript function that dynamically generates a navigation menu based on a nested data structure. The data, represented in a JavaScript array of objects, outlines a hierarchical structure of navigation items, where each item can have a name and potentially a list of child items, denoting sub-navigation menus.\u003c/p\u003e\n\u003cp\u003eThe primary challenge is to traverse this nested data structure and create an HTML navigation menu that reflects the hierarchical relationships. This involves creating \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e elements for each level of the hierarchy, \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e elements for each navigation item, and nesting them appropriately according to their parent-child relationships in the data.\u003c/p\u003e\n\u003cp\u003eThe JavaScript function \u003ccode\u003erenderNav\u003c/code\u003e takes this navigation data as input and renders the corresponding HTML structure within a specified context, which by default is \u003ccode\u003edocument.body\u003c/code\u003e. The function uses recursion to handle nested data, allowing it to generate menus at any depth.\u003c/p\u003e\n\u003cp\u003eFor example, given a simplified version of the navigation data:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e[\r\n  {\r\n    \"name\": \"Home\",\r\n    \"children\": [\r\n      {\r\n        \"name\": \"About\",\r\n        \"children\": [\r\n          {\"name\": \"Team\", \"children\": []},\r\n          {\"name\": \"History\", \"children\": []}\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\"name\": \"Services\", \"children\": []}\r\n]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function would produce an HTML structure similar to:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;ul\u0026gt;\r\n  \u0026lt;li\u0026gt;Home\r\n    \u0026lt;ul\u0026gt;\r\n      \u0026lt;li\u0026gt;About\r\n        \u0026lt;ul\u0026gt;\r\n          \u0026lt;li\u0026gt;Team\u0026lt;/li\u0026gt;\r\n          \u0026lt;li\u0026gt;History\u0026lt;/li\u0026gt;\r\n        \u0026lt;/ul\u0026gt;\r\n      \u0026lt;/li\u0026gt;\r\n    \u0026lt;/ul\u0026gt;\r\n  \u0026lt;/li\u0026gt;\r\n  \u0026lt;li\u0026gt;Services\u0026lt;/li\u0026gt;\r\n\u0026lt;/ul\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task evaluates your ability to work with DOM manipulation, recursion, and data structures in JavaScript, which are essential skills for frontend development.\u003c/p\u003e\n",
        "slug": "navigation",
        "date": "2024-03-16T23:10:03",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "22. Next Right Sibling",
        "content": "\u003carticle\u003e\n\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-195\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/I8ncH1ncdGaBXV3nwPH061w1MmdqNR9p_1169x546_1597852405395-300x140.png\" alt=\"\" width=\"300\" height=\"140\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/I8ncH1ncdGaBXV3nwPH061w1MmdqNR9p_1169x546_1597852405395-300x140.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/I8ncH1ncdGaBXV3nwPH061w1MmdqNR9p_1169x546_1597852405395-1024x478.png 1024w, https://api.frontendlead.com/wp-content/uploads/2024/03/I8ncH1ncdGaBXV3nwPH061w1MmdqNR9p_1169x546_1597852405395-768x359.png 768w, https://api.frontendlead.com/wp-content/uploads/2024/03/I8ncH1ncdGaBXV3nwPH061w1MmdqNR9p_1169x546_1597852405395.png 1169w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou are tasked with creating a function \u003ccode\u003efindNextRightSibling\u003c/code\u003e that identifies the next right sibling of a given node within a tree structure, resembling the DOM tree. This function should traverse the tree in a breadth-first manner, using a queue to keep track of the nodes.\u003c/p\u003e\n\u003cp\u003eThe function \u003ccode\u003efindNextRightSibling\u003c/code\u003e takes two arguments:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eroot\u003c/code\u003e: The root node of the tree from which the search begins.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etarget\u003c/code\u003e: The node for which you want to find the next right sibling.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe goal is to find and return the node that is the immediate right sibling of the \u003ccode\u003etarget\u003c/code\u003e node. If the \u003ccode\u003etarget\u003c/code\u003e node is the last child of its parent or does not have any right siblings, the function should return \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis functionality is crucial for applications that need to understand or manipulate hierarchical structures similar to the DOM, where knowing a node\u0026#8217;s relationship to its siblings can influence layout, styling, or interactivity.\u003c/p\u003e\n\u003c/article\u003e\n",
        "slug": "next-right-sibling",
        "date": "2024-03-14T16:28:45",
        "featuredImage": null,
        "info": {
            "company": [
                "Microsoft"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/46KnJk8eZDQ"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "23. Node Store",
        "content": "\u003cp\u003eCreate a class called \u003ccode\u003eNodeStore\u003c/code\u003e that allows you to store values associated with DOM nodes. The class should provide the following methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eset(node, value):\u003c/strong\u003e Sets the value for a given DOM node.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eget(node):\u003c/strong\u003e Retrieves the value associated with a given DOM node.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehas(node):\u003c/strong\u003e Checks if a given DOM node exists in the store.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eRemember, we will be storing DOM nodes, so each retrieval might have the same node item, so we want keys to be unique.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst node1 = document.createElement('p');\r\nconst node2 = document.createElement('p');\r\nconst store = new NodeStore();\r\nstore.set(node1, 1);\r\nstore.set(node2, 2);\r\nconsole.log(store.get(node1)); // Expected output: 1\r\nconsole.log(store.get(node2)); // Expected output: 2\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task tests your understanding of JavaScript classes, DOM manipulation, and associative arrays or objects. It\u0026#8217;s a practical scenario for frontend developers who need to manage state or metadata associated with specific DOM elements dynamically.\u003c/p\u003e\n",
        "slug": "node-store",
        "date": "2024-03-14T23:33:05",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/oNYXqbwaQHI"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "24. Parser for Rich Text Editor",
        "content": "\u003cp\u003eGiven a string and an array representing styles, the task is to render HTML similar to the output of a rich text editor.\u003c/p\u003e\n\u003cp\u003eThe input consists of a string and a style array. Each element in the style array is another array that contains three items: the start index, the end index, and the HTML tag to be applied. The goal is to apply these styles to the specified ranges within the string and generate the corresponding HTML output.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: 'Hello, world', [[0, 2, 'i'], [4, 9, 'b'], [7, 10, 'u']]\r\n\r\nOutput: '\u0026lt;i\u0026gt;Hel\u0026lt;/i\u0026gt;l\u0026lt;b\u0026gt;o, w\u0026lt;u\u0026gt;orl\u0026lt;/u\u0026gt;\u0026lt;/b\u0026gt;\u0026lt;u\u0026gt;d\u0026lt;/u\u0026gt;'\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example demonstrates overlapping style ranges where the \u003ccode\u003e\u0026lt;u\u0026gt;\u003c/code\u003e tag is applied both within and outside the \u003ccode\u003e\u0026lt;b\u0026gt;\u003c/code\u003e tag\u0026#8217;s range, showing the complexity of nesting and ordering HTML tags based on the input style ranges.\u003c/p\u003e\n\u003cp\u003eThe challenge lies in correctly applying the styles, especially when the style ranges overlap, ensuring that the HTML tags are nested and ordered properly according to their positions in the input string.\u003c/p\u003e\n",
        "slug": "parser-for-rich-text-editor",
        "date": "2024-03-15T16:16:31",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/watch?v=o89VYBvOAmo"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "12. Phone Number Parser",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-1271\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-04-17-at-9.31.01-AM.png\" alt=\"\" width=\"449\" height=\"176\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-04-17-at-9.31.01-AM.png 449w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-04-17-at-9.31.01-AM-300x118.png 300w\" sizes=\"(max-width: 449px) 100vw, 449px\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou are tasked with developing a phone number parser component using React, focusing on dynamically formatting and validating user inputs. This parser transcends mere data format assurance; it enhances user experience and data integrity in web applications that necessitate phone number inputs.\u003c/p\u003e\n\u003ch3\u003eCore Functionality\u003c/h3\u003e\n\u003cp\u003eThe parser will feature a \u003ccode\u003eForm\u003c/code\u003e component for user input. As users type, the input field will automatically format the numbers into a readable format (e.g., \u003ccode\u003e(123) 456-7890\u003c/code\u003e), providing immediate feedback crucial for usability and allowing users to correct mistakes in real-time.\u003c/p\u003e\n\u003ch3\u003eValidation and Error Handling\u003c/h3\u003e\n\u003cp\u003eIn addition to formatting, the parser will incorporate validation logic to confirm inputs adhere to a standard 10-digit phone number format, crucial for backend processing and frontend consistency, thus mitigating the risk of invalid data submissions.\u003c/p\u003e\n\u003ch3\u003eUser Interactions\u003c/h3\u003e\n\u003cp\u003eThe component will adeptly manage various user interactions. For example, when a user attempts to copy the phone number, only the digits (excluding formatting characters) will be copied to the clipboard, ensuring phone numbers are usable in diverse contexts without necessitating additional formatting.\u003c/p\u003e\n\u003ch3\u003eTechnical Approach\u003c/h3\u003e\n\u003cp\u003eReact\u0026#8217;s \u003ccode\u003euseState\u003c/code\u003e and \u003ccode\u003euseEffect\u003c/code\u003e hooks will be employed for state management and side effects, respectively. Functions like \u003ccode\u003ecleanNumber\u003c/code\u003e will strip out non-numeric characters for consistent storage, while \u003ccode\u003eformatPhoneNumber\u003c/code\u003e will enhance displayed value readability.\u003c/p\u003e\n\u003ch3\u003eValidation Workflow\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003evalidateInput\u003c/code\u003e function will encapsulate validation logic, checking for completeness and format correctness, thus maintaining form integrity and guiding user inputs.\u003c/p\u003e\n",
        "slug": "build-phone-number-parser",
        "date": "2024-03-10T18:13:33",
        "featuredImage": null,
        "info": {
            "company": [
                "Stripe"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "66. Promise Methods",
        "content": "\u003cp\u003eExtend the Promise object in JavaScript by implementing custom methods that mimic the functionality of existing Promise methods. Specifically, you are required to create the following methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePromise.myRace\u003c/code\u003e: This method should mimic the behavior of \u003ccode\u003ePromise.race\u003c/code\u003e, returning a promise that resolves or rejects as soon as one of the promises in the input array does, reflecting that promise\u0026#8217;s outcome.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.myAny\u003c/code\u003e: Similar to \u003ccode\u003ePromise.any\u003c/code\u003e, this method should return a promise that resolves as soon as any one of the input promises resolves, with the value of the resolved promise. If all input promises are rejected, it should reject with an aggregate error.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.myAll\u003c/code\u003e: This method should emulate \u003ccode\u003ePromise.all\u003c/code\u003e, returning a promise that resolves when all of the input promises have resolved, with an array of the results, or rejects as soon as one of the input promises rejects.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePromise.myAllSettled\u003c/code\u003e: Inspired by \u003ccode\u003ePromise.allSettled\u003c/code\u003e, this method should return a promise that resolves after all input promises have settled (resolved or rejected), with an array of objects that each describe the outcome of each promise.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, using \u003ccode\u003ePromise.myRace\u003c/code\u003e, you can race multiple promises against each other and act upon the first to settle, whether it resolves or rejects:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ePromise.myRace([Promise.resolve('First'), Promise.reject('Second'), Promise.resolve('Third')])\r\n  .then(value =\u0026gt; console.log(value))\r\n  .catch(error =\u0026gt; console.error(error));\r\n// Expected output: \"First\"\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eImplementing these methods will give you deeper insights into the workings of promises in JavaScript, enhancing your understanding of asynchronous programming patterns.\u003c/p\u003e\n",
        "slug": "promise-methods",
        "date": "2024-03-14T15:06:25",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "LinkedIn",
                "ClickUp"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "25. Promisify Any Function",
        "content": "\u003csection\u003eYour task is to implement the \u003ccode\u003epromisify\u003c/code\u003e function. This function should:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAccept a callback-based function as its only argument.\u003c/li\u003e\n\u003cli\u003eReturn a new function that, when called, returns a Promise.\u003c/li\u003e\n\u003cli\u003eEnsure that if the original function calls the callback with an error, the returned Promise is rejected with that error.\u003c/li\u003e\n\u003cli\u003eResolve the returned Promise with the result if the original function completes successfully.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis transformation will allow developers to invoke legacy callback-based functions in a more modern, cleaner, and more intuitive way, improving code readability and error handling.\u003c/p\u003e\n\u003c/section\u003e\n",
        "slug": "promisify-any-function",
        "date": "2024-03-13T15:11:53",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "68. Rate Limiter",
        "content": "\u003cp\u003eYou are tasked with safeguarding a web service or an API endpoint from potential abuse, such as denial-of-service (DOS) attacks, by implementing a rate limiter. Build a function called \u003ccode\u003eisAllowed\u003c/code\u003e within a \u003ccode\u003eRateLimiter\u003c/code\u003e class. This function should deny any request from a unique client that exceeds the threshold of 100 requests within the last second.\u003c/p\u003e\n\u003cp\u003eConsider the following examples to understand the functionality of the \u003ccode\u003eisAllowed\u003c/code\u003e function:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf Client A has initiated 99 requests in the preceding second and makes another request, \u003ccode\u003eisAllowed\u003c/code\u003e should \u003cstrong\u003eAllow\u003c/strong\u003e this request.\u003c/li\u003e\n\u003cli\u003eIf Client B has sent 101 requests within the same timeframe, \u003ccode\u003eisAllowed\u003c/code\u003e should \u003cstrong\u003eDeny\u003c/strong\u003e any subsequent requests from Client B.\u003c/li\u003e\n\u003cli\u003eIf Client C has made 50 requests in the past second, the next request from Client C should also be \u003cstrong\u003eAllowed\u003c/strong\u003e by \u003ccode\u003eisAllowed\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis rate limiting mechanism serves as a defensive measure against excessive usage or attacks, ensuring that the web service remains available and performs optimally for all users.\u003c/p\u003e\n",
        "slug": "rate-limiter",
        "date": "2024-03-15T17:41:45",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "78. Reorder Array With New Indexes",
        "content": "\u003cp\u003eGiven an array of items and a corresponding array of new index positions, write a function to reorder the items array according to the new index positions provided. Your function should mutate the original items array to reflect the new order.\u003c/p\u003e\n\u003cp\u003eThis challenge tests your understanding of array manipulation and sorting algorithms. It\u0026#8217;s a common task in frontend development, especially when dealing with dynamic user interfaces where elements might need reordering based on user actions or other criteria.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: items = [\"a\", \"b\", \"c\", \"d\", \"e\"], newOrder = [3, 0, 4, 1, 2]\r\nOutput: items becomes [\"b\", \"d\", \"e\", \"a\", \"c\"]\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function should take two arguments:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eitems\u003c/code\u003e: An array of elements that need to be reordered.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enewOrder\u003c/code\u003e: An array of integers representing the new index positions for each corresponding element in the \u003ccode\u003eitems\u003c/code\u003e array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe goal is to mutate the \u003ccode\u003eitems\u003c/code\u003e array such that each element is moved to its new index as specified by the \u003ccode\u003enewOrder\u003c/code\u003e array. Ensure your solution accounts for the possibility of various data types within the \u003ccode\u003eitems\u003c/code\u003e array and handles edge cases gracefully.\u003c/p\u003e\n",
        "slug": "reorder-array-with-new-indexes",
        "date": "2024-03-18T21:36:31",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "83. Roman Numeral To Int",
        "content": "\u003cp\u003eImplement a function \u003ccode\u003eromanToInteger\u003c/code\u003e that converts a Roman numeral string to an integer. Roman numerals are represented by seven different symbols: \u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e and \u003ccode\u003eM\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe rules for Roman numeral conversion are as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eI\u003c/code\u003e can be placed before \u003ccode\u003eV\u003c/code\u003e (5) and \u003ccode\u003eX\u003c/code\u003e (10) to make 4 and 9.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eX\u003c/code\u003e can be placed before \u003ccode\u003eL\u003c/code\u003e (50) and \u003ccode\u003eC\u003c/code\u003e (100) to make 40 and 90.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eC\u003c/code\u003e can be placed before \u003ccode\u003eD\u003c/code\u003e (500) and \u003ccode\u003eM\u003c/code\u003e (1000) to make 400 and 900.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFunction Signature:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction romanToInteger(str: string): number\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst result = romanToInteger(\"MCMXCIV\");\r\nconsole.log(result);  // Output: 1994\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour solution should handle strings representing Roman numerals in the range from 1 to 3999. The input string is guaranteed to be a valid Roman numeral up to 3999.\u003c/p\u003e\n",
        "slug": "roman-numeral-to-int",
        "date": "2024-03-18T22:30:16",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "70. RxJS Observable",
        "content": "\u003carticle\u003e\n\u003csection\u003e\n\u003ch1\u003eImplementing a Basic Observable Class in JavaScript\u003c/h1\u003e\n\u003cp\u003eIn modern application development, especially in asynchronous event-driven architectures, Observables play a pivotal role. They allow subscribing to a stream of values and receiving notifications for new values, errors, and completion events. This functionality is essential for managing asynchronous data flows and handling events in a decoupled manner.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eObjective\u003c/h2\u003e\n\u003cp\u003eYour task is to implement a basic \u003ccode\u003eObservable\u003c/code\u003e class in JavaScript. This class should enable the subscription to a stream of values, supporting multiple subscribers and handling errors and completion events effectively.\u003c/p\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eRequirements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe class must support multiple subscribers.\u003c/li\u003e\n\u003cli\u003eIt should handle errors and completion events, delivering these notifications exactly once.\u003c/li\u003e\n\u003cli\u003eSubsequent \u003ccode\u003enext\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e, or \u003ccode\u003ecomplete\u003c/code\u003e calls after an error/complete event should be ignored.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003esubscribe\u003c/code\u003e function should accept either an object with \u003ccode\u003enext\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e, and \u003ccode\u003ecomplete\u003c/code\u003e methods or a function treated as the \u003ccode\u003enext\u003c/code\u003e method.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003esubscribe\u003c/code\u003e function returns a Subscription object, allowing unsubscribing from the Observable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eExample Usage\u003c/h2\u003e\n\u003cp\u003eConsider the following observer object, indicating its purpose through \u003ccode\u003enext\u003c/code\u003e, \u003ccode\u003eerror\u003c/code\u003e, and \u003ccode\u003ecomplete\u003c/code\u003e callbacks:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst observer = {\r\n  next: (value) =\u003e { console.log('Received a value:', value); },\r\n  error: (error) =\u003e { console.log('Encountered an error:', error); },\r\n  complete: () =\u003e { console.log('No more values to receive.'); }\r\n};\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis Observer can be associated with an Observable, which dispatches values, errors, or completion signals to the attached Observer:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst observable = new Observable((subscriber) =\u003e {\r\n  subscriber.next(1);\r\n  subscriber.next(2);\r\n  setTimeout(() =\u003e {\r\n    subscriber.next(3);\r\n    subscriber.next(4);\r\n    subscriber.complete();\r\n  }, 100);\r\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAttaching the observer to the observable and handling the subscription allows for receiving values and notifications as defined:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst subscription = observable.subscribe(observer);\r\n// Logs:\r\n// Received a value: 1\r\n// Received a value: 2\r\n// (after delay) Received a value: 3\r\n// Received a value: 4\r\n// No more values to receive.\u003c/code\u003e\u003c/pre\u003e\n\u003c/section\u003e\n\u003csection\u003e\n\u003ch2\u003eFollow-Up Problems\u003c/h2\u003e\n\u003cp\u003eThis Observable and Observer implementation introduces a variety of intriguing follow-up problems and patterns to explore, further expanding on reactive programming concepts.\u003c/p\u003e\n\u003c/section\u003e\n\u003c/article\u003e\n",
        "slug": "javascript-observables-reactive-programming-guide",
        "date": "2024-03-12T15:32:38",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "71. Set Interval with Linear Delay",
        "content": "\u003cp\u003eThe task at hand involves creating a custom function named \u003ccode\u003emySetInterval(func, delay, period)\u003c/code\u003e that diverges from the traditional \u003ccode\u003ewindow.setInterval\u003c/code\u003e behavior. Instead of executing the provided function \u003ccode\u003efunc\u003c/code\u003e at regular intervals, this function should execute \u003ccode\u003efunc\u003c/code\u003e with increasing delays following a linear pattern. The delay before each subsequent execution is calculated using the formula \u003ccode\u003edelay + period * count\u003c/code\u003e, where \u003ccode\u003ecount\u003c/code\u003e is the number of times the function has been called.\u003c/p\u003e\n\u003cp\u003eTo illustrate, consider the following example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet prev = Date.now();\r\nconst func = () =\u003e {\r\n  const now = Date.now();\r\n  console.log('Time elapsed:', now - prev, 'ms');\r\n  prev = now;\r\n};\r\n\r\nconst id = mySetInterval(func, 100, 200);\r\n\r\n// Output:\r\n// Time elapsed: 100ms\r\n// Time elapsed: 400ms (100 + 200 * 1)\r\n// Time elapsed: 900ms (100 + 200 * 2)\r\n// Time elapsed: 1600ms (100 + 200 * 3)\r\n// ...\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis functionality allows for scheduling tasks with increasing intervals, which can be particularly useful in scenarios where the intensity of task execution needs to decrease over time.\u003c/p\u003e\n\u003cp\u003eAdditionally, a function named \u003ccode\u003emyClearInterval(id)\u003c/code\u003e should be provided to stop the scheduled execution. This function should take an identifier returned by \u003ccode\u003emySetInterval\u003c/code\u003e and cancel the scheduled task.\u003c/p\u003e\n\u003cp\u003eThe challenge lies not only in implementing the increasing delay logic but also in ensuring that the \u003ccode\u003emySetInterval\u003c/code\u003e and \u003ccode\u003emyClearInterval\u003c/code\u003e functions can be used similarly to their native JavaScript counterparts, providing a seamless interface for scheduling and canceling tasks with dynamic intervals.\u003c/p\u003e\n",
        "slug": "set-interval-with-linear-delay",
        "date": "2024-03-15T17:04:47",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "26. Skill Endorsements",
        "content": "\u003cp\u003eYou are given an array of skill endorsements, where each endorsement is represented by an object that includes a skill and the user who endorsed it. Your task is to write a function, \u003ccode\u003eaggregateSkillEndorsements\u003c/code\u003e, that processes this array and produces a summary for each skill.\u003c/p\u003e\n\u003cp\u003eThis summary should include the skill name, an array of users who have endorsed the skill, and the total count of endorsements the skill has received. The primary challenge lies in efficiently aggregating this information from a potentially large and unorganized list of endorsements.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e An array of endorsement objects, where each object has \u003ccode\u003eskill\u003c/code\u003e and \u003ccode\u003euser\u003c/code\u003e properties.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e An array of objects, each representing a skill summary that contains the skill name, an array of unique users who endorsed it, and the total count of endorsements for that skill.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst endorsements = [\r\n  { skill: 'css', user: 'Bill' },\r\n  { skill: 'javascript', user: 'Chad' },\r\n  { skill: 'javascript', user: 'Bill' },\r\n  { skill: 'css', user: 'Sue' },\r\n  { skill: 'javascript', user: 'Sue' },\r\n  { skill: 'html', user: 'Sue' }\r\n];\r\n\r\nconst skillSummaries = aggregateSkillEndorsements(endorsements);\r\n\r\n// Output:\r\n// [\r\n//   { skill: 'javascript', users: ['Chad', 'Bill', 'Sue'], count: 3 },\r\n//   { skill: 'css', users: ['Bill', 'Sue'], count: 2 },\r\n//   { skill: 'html', users: ['Sue'], count: 1 }\r\n// ]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function must efficiently traverse the endorsements array, grouping endorsements by skill while keeping track of the unique users and total count for each skill. This task tests your ability to manipulate and aggregate data from complex data structures, a common requirement in software development.\u003c/p\u003e\n",
        "slug": "aggregate-skill-endorsements-javascript-guide",
        "date": "2024-03-08T22:47:21",
        "featuredImage": null,
        "info": {
            "company": [
                "LinkedIn"
            ],
            "category": [
                "JSON"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "72. Stream",
        "content": "\u003cp\u003eYou are tasked with building a simple stream subscription system in JavaScript, encapsulated within a Stream class. This class should enable users to subscribe to the stream and receive updates whenever new data is pushed into it, allowing for real-time data processing and manipulation.\u003c/p\u003e\n\u003cp\u003eThe Stream class should be designed with the following functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eSubscriptions:\u003c/strong\u003e Users can subscribe to the stream by providing a callback function. This function should be invoked with the new data as its argument whenever the stream is updated.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eData Pushing:\u003c/strong\u003e The class should provide a method to push new data into the stream. Upon pushing new data, all subscribed callback functions should be executed with the newly pushed data, enabling subscribers to react to updates in real-time.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHere\u0026#8217;s a simple usage example demonstrating both subscription and data pushing:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\n// Creating a new instance of the Stream class\r\nconst myStream = new Stream();\r\n\r\n// Subscribing to the stream with a callback function\r\nmyStream.subscribe(data =\u003e console.log(`Received data: ${data}`));\r\n\r\n// Pushing new data into the stream, triggering subscribed callbacks\r\nmyStream.push('Hello, world!');\r\n// Output: \"Received data: Hello, world!\"\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis implementation facilitates a versatile mechanism for handling real-time data streams, allowing multiple consumers to process and react to new data as it becomes available. Whether for handling event streams, processing live data feeds, or implementing observer patterns, the Stream class provides a foundational structure for these scenarios.\u003c/p\u003e\n\u003cp\u003eAs you delve into building this stream subscription system, consider the aspects of data flow, subscriber management, and the efficiency of data dissemination among multiple subscribers.\u003c/p\u003e\n",
        "slug": "stream-subscription-service",
        "date": "2024-03-10T17:46:01",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "73. String Repeater",
        "content": "\u003carticle\u003e\n\u003cp\u003eWrite a function named \u003ccode\u003emyRepeat\u003c/code\u003e that extends the String prototype. This function should allow a string to be repeated a specified number of times, enhancing the native capabilities of string manipulation in JavaScript.\u003c/p\u003e\n\u003ch3\u003eInput\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eString:\u003c/strong\u003e The string to be repeated.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eInteger (times):\u003c/strong\u003e The number of times the string should be repeated.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eOutput\u003c/h3\u003e\n\u003cp\u003eA new string that concatenates the original string the specified number of times.\u003c/p\u003e\n\u003ch3\u003eExample\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e \u003ccode\u003e\"hello world \".myRepeat(2)\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u003ccode\u003e\"hello world hello world \"\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe function \u003ccode\u003emyRepeat\u003c/code\u003e takes an integer \u003ccode\u003etimes\u003c/code\u003e as an argument and returns a new string that repeats the original string \u003ccode\u003etimes\u003c/code\u003e number of times. This custom method does not modify the original string but instead returns a new string with the repeated content, demonstrating an extension of the String prototype\u0026#8217;s functionality in JavaScript.\u003c/p\u003e\n\u003c/article\u003e\n",
        "slug": "string-repeater",
        "date": "2024-03-14T16:18:02",
        "featuredImage": null,
        "info": {
            "company": [
                "Apple"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "62. Tabs",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-medium wp-image-380\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.18.45-PM-300x261.png\" alt=\"\" width=\"300\" height=\"261\" srcset=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.18.45-PM-300x261.png 300w, https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-3.18.45-PM.png 596w\" sizes=\"(max-width: 300px) 100vw, 300px\" /\u003e\u003c/p\u003e\n\u003cp\u003eThe objective is to develop a tabbed UI component that allows users to interactively switch between different tabs. Each tab should display specific content associated with it, and only the content of the active tab should be visible at any time. The component should be styled and functional, providing an intuitive user experience.\u003c/p\u003e\n\u003cp\u003eEach tab\u0026#8217;s visibility is controlled by React state, allowing for dynamic rendering of tab content based on user interaction.\u003c/p\u003e\n",
        "slug": "tabs",
        "date": "2024-03-16T22:15:34",
        "featuredImage": null,
        "info": {
            "company": [
                "Airbnb"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "27. Testing Framework",
        "content": "\u003cp\u003eImplement a simple testing framework for frontend code that allows you to define test suites and test cases, and provides assertion methods for validating expected outcomes. Write the necessary functions and classes to achieve this.\u003c/p\u003e\n\u003cp\u003eThe framework should enable the definition of a \u003ccode\u003edescribe\u003c/code\u003e function for test suites, an \u003ccode\u003eit\u003c/code\u003e function for test cases within those suites, and an \u003ccode\u003eexpect\u003c/code\u003e function for making assertions within those test cases. The framework should support the following functionalities:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eGrouping related test cases using the \u003ccode\u003edescribe\u003c/code\u003e function.\u003c/li\u003e\n\u003cli\u003eDefining individual test cases with the \u003ccode\u003eit\u003c/code\u003e function that describes the specific test.\u003c/li\u003e\n\u003cli\u003eMaking assertions within test cases using the \u003ccode\u003eexpect\u003c/code\u003e function and assertion methods like \u003ccode\u003etoExist\u003c/code\u003e, \u003ccode\u003etoBe\u003c/code\u003e, and \u003ccode\u003etoBeType\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('Hello world', () =\u0026gt; {\r\n  it('input exists', () =\u0026gt; {\r\n    let input = null;\r\n    expect(input).toExist();\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis should produce an output like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebeginning test suite Hello world\r\nbeginning test case input exists\r\nfailed running test suite Hello world on test case input exists with error message expected value to exist but got null\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnother example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('Hello world', () =\u0026gt; {\r\n  it('input is as expected', () =\u0026gt; {\r\n    let input = 'foo';\r\n    let expected = 'fooo';\r\n    expect(input).toBe(expected);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eShould result in:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebeginning test suite Hello world\r\nbeginning test case input is as expected\r\nfailed running test suite Hello world on test case input is as expected with error message expected \"foo\" to be \"fooo\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003edescribe('Hello world', () =\u0026gt; {\r\n  it('input is as expected', () =\u0026gt; {\r\n    let input = 'foo';\r\n    let expected = 'string';\r\n    expect(input).toBeType(expected);\r\n  });\r\n});\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eWould output:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ebeginning test suite Hello world\r\nbeginning test case input is as expected\r\nfailed running test suite Hello world on test case input is as expected with error message expected \"foo\" to be of type \"string\" but got \"object\"\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis framework aims to provide a lightweight and straightforward way for developers to write and organize tests, ensuring the reliability and correctness of their frontend code.\u003c/p\u003e\n",
        "slug": "testing-framework",
        "date": "2024-03-14T14:44:06",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "28. Text Highlighter",
        "content": "\u003cp\u003eGiven an HTML element and a specific word to look for, the task is to write a function that highlights the occurrences of that word within the text content of the element. The function should encapsulate the found word with a \u003ccode\u003espan\u003c/code\u003e element having a specified background color to visually emphasize the highlighted text.\u003c/p\u003e\n\u003cp\u003eConsider the following HTML structure as an input example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"hello\"\u0026gt; I have some text \r\n  \u0026lt;p\u0026gt;Which has some subtext \u0026lt;a href=\"#\"\u0026gt;that has a link\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \r\n  \u0026lt;p\u0026gt;And a sibling\u0026lt;/p\u0026gt; \r\n  Finally some random text\r\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe objective is to highlight a word, for instance, \u0026#8220;Finally\u0026#8221;, within the \u003ccode\u003ediv\u003c/code\u003e element with the id \u003ccode\u003ehello\u003c/code\u003e. The word \u0026#8220;Finally\u0026#8221; should be wrapped in a \u003ccode\u003espan\u003c/code\u003e element with a background color, for example, red, to visually differentiate it from the rest of the text.\u003c/p\u003e\n\u003cp\u003eThis challenge requires manipulating the DOM to dynamically change the HTML content based on the text search criteria. The solution should ensure that only text content is affected without altering the inherent structure of the HTML or affecting nested elements such as \u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n",
        "slug": "text-highlighter",
        "date": "2024-03-15T15:34:58",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/3Isrio8vIP8"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "5. Throttle",
        "content": "\u003cp\u003eIn this challenge, you are tasked with creating a \u003ccode\u003ethrottle\u003c/code\u003e function, a fundamental concept in optimizing web applications by controlling the rate at which a function is executed. This mechanism is particularly beneficial for handling events that fire at a high frequency, such as scrolling or resizing, ensuring that the event handler doesn\u0026#8217;t get called more often than is necessary for a smooth user experience.\u003c/p\u003e\n\u003ch3\u003eFunction Requirements:\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003ethrottle\u003c/code\u003e function should accept a callback function and a delay time in milliseconds as parameters. It must return a new function, called \u003ccode\u003ethrottler\u003c/code\u003e, that, when invoked, ensures the callback function is executed at most once in the specified delay period.\u003c/p\u003e\n\u003ch3\u003eBehavioral Specifications:\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003ethrottler\u003c/code\u003e function calculates the time elapsed since the last callback execution and decides whether to execute the callback immediately or after the remaining delay.\u003c/li\u003e\n\u003cli\u003eIf the elapsed time is less than the specified delay, the \u003ccode\u003ethrottler\u003c/code\u003e function postpones the callback execution until the full delay period has passed since the last execution.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003ethrottler\u003c/code\u003e function also provides a \u003ccode\u003ecancel\u003c/code\u003e method to cancel any scheduled callback execution, enhancing control over the throttling behavior.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eTechnical Approach:\u003c/h3\u003e\n\u003cp\u003eImplement the \u003ccode\u003ethrottle\u003c/code\u003e function using closure to maintain the state between invocations, such as the last call time and any pending timer. This approach ensures that the callback is not executed more frequently than the specified delay, regardless of how often the \u003ccode\u003ethrottler\u003c/code\u003e function is called.\u003c/p\u003e\n\u003cp\u003eBy integrating the \u003ccode\u003ethrottle\u003c/code\u003e function into your application, you can significantly improve performance and user experience by reducing the frequency of heavy computations or DOM manipulations in response to rapid, high-frequency events.\u003c/p\u003e\n",
        "slug": "throttle",
        "date": "2024-03-09T00:15:44",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Robinhood",
                "Zillow",
                "Airbnb",
                "OpenAI",
                "Microsoft",
                "Netflix",
                "Apple",
                "LinkedIn",
                "Stripe",
                "ClickUp",
                "PayPal",
                "Snap",
                "Vimeo",
                "Adobe",
                "TikTok"
            ],
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/xf58_woO1oc"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "29. Throttle II",
        "content": "\u003cp\u003eThis problem extends the concept of throttling function executions, introducing an improved version of the \u003ccode\u003ethrottle()\u003c/code\u003e function. The enhanced \u003ccode\u003ethrottle()\u003c/code\u003e function now accepts an additional third parameter: an options object. This object includes two boolean properties: \u003ccode\u003eleading\u003c/code\u003e and \u003ccode\u003etrailing\u003c/code\u003e. The \u003ccode\u003eleading\u003c/code\u003e property decides if the throttled function should be invoked at the start or after a delay, while the \u003ccode\u003etrailing\u003c/code\u003e property controls whether the function should be called after the delay concludes or right away.\u003c/p\u003e\n\u003cp\u003eThe primary objective is to design a throttling function that can limit the execution rate of a given function. Unlike the basic implementation from the previous problem, this version grants more control over the throttled function\u0026#8217;s behavior, allowing for a more tailored functionality.\u003c/p\u003e\n\u003cp\u003eTo illustrate, consider the following examples which demonstrate how the options object influences the throttling:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWith \u003ccode\u003e{ leading: true, trailing: false }\u003c/code\u003e, the function will execute immediately on the first call, then ignore all calls during the wait time.\u003c/li\u003e\n\u003cli\u003eWith \u003ccode\u003e{ leading: false, trailing: true }\u003c/code\u003e, the function will ignore the initial call, then execute at the end of the wait time, applying the last arguments passed during the wait.\u003c/li\u003e\n\u003cli\u003eWhen both are true or both are false, the function\u0026#8217;s behavior adjusts accordingly, offering various execution strategies that can be customized as needed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo verify the correctness of your \u003ccode\u003ethrottle()\u003c/code\u003e function, a test function named \u003ccode\u003erun()\u003c/code\u003e is provided. It simulates function calls, capturing their timing, and utilizes \u003ccode\u003esetTimeout()\u003c/code\u003e to manage execution based on the specified delay and options. The outcome is an array of strings that represent the executed function calls and their respective timings.\u003c/p\u003e\n\u003cp\u003eGiven this setup, your task is to implement the improved \u003ccode\u003ethrottle()\u003c/code\u003e function. Ensure that it adheres to the specified behavior, taking into account the leading and trailing options, and that it functions accurately even in the complex browser environment where \u003ccode\u003esetTimeout()\u003c/code\u003e and \u003ccode\u003eclearTimeout()\u003c/code\u003e might not always be precise.\u003c/p\u003e\n",
        "slug": "throttle-ii",
        "date": "2024-03-12T01:08:34",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Google",
                "Zillow",
                "Microsoft",
                "Snap"
            ],
            "category": [
                "Array"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "30. Tic Tac Toe",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-370\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-2.44.10-PM.png\" alt=\"\" width=\"200\" height=\"216\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou are tasked with building a Tic-Tac-Toe game in React. The game allows two players to take turns marking squares on a 3\u0026#215;3 grid. The objective is to be the first player to place three of their marks in a horizontal, vertical, or diagonal row to win the game. Implement the game logic, handle player turns, and declare a winner appropriately.\u003c/p\u003e\n\u003cp\u003eInput Examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePlayer X clicks on square 0: \u003ccode\u003e['X', null, null, null, null, null, null, null, null]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePlayer O clicks on square 4: \u003ccode\u003e['X', null, null, null, 'O', null, null, null, null]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003ePlayer X wins: \u003ccode\u003e['X', null, null, null, 'O', null, 'X', null, null]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExpected Output Examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDisplay \u003cstrong\u003e\u0026#8220;Next Player: X\u0026#8221;\u003c/strong\u003e when it\u0026#8217;s Player X\u0026#8217;s turn.\u003c/li\u003e\n\u003cli\u003eDisplay \u003cstrong\u003e\u0026#8220;Next Player: O\u0026#8221;\u003c/strong\u003e when it\u0026#8217;s Player O\u0026#8217;s turn.\u003c/li\u003e\n\u003cli\u003eDisplay \u003cstrong\u003e\u0026#8220;Winner: X\u0026#8221;\u003c/strong\u003e when Player X wins.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis game requires understanding React state management to track the game board and current player, implementing game logic to determine the winner, and rendering the UI based on the game\u0026#8217;s state.\u003c/p\u003e\n",
        "slug": "tic-tac-toe",
        "date": "2024-03-16T21:41:03",
        "featuredImage": null,
        "info": {
            "company": [
                "Atlassian"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "75. To-do App",
        "content": "\u003cp\u003eYou\u0026#8217;ve been tasked with building a basic ToDo app using HTML, CSS, and JavaScript. The goal of this project is to create a functional todo list that allows users to add, remove, complete, and update tasks. This exercise focuses on enhancing your skills with DOM manipulation, event handling, and dynamic content generation in Vanilla JavaScript.\u003c/p\u003e\n\u003cp\u003eThe application\u0026#8217;s UI is already set up with HTML and CSS. Your main task is to implement the JavaScript functionality to bring the ToDo app to life. Here are the key features your app should support:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eAdding a ToDo Item:\u003c/strong\u003e Users should be able to type in a task and add it to the list by submitting the form. The new task should appear at the top of the list.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemoving a ToDo Item:\u003c/strong\u003e Each task should have an associated \u0026#8216;Delete\u0026#8217; button. Clicking this button should remove the task from the list.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCompleting a ToDo Item:\u003c/strong\u003e Each task should also have a \u0026#8216;Complete\u0026#8217; button. When clicked, the task should be visually marked as completed (e.g., strikethrough text).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUpdating a ToDo Item:\u003c/strong\u003e Tasks should be editable. An \u0026#8216;Update\u0026#8217; button should toggle the task between an editable state and a view state. Users can change the task text and save the changes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e Below is a visual and functional description of the app\u0026#8217;s intended behavior.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;!-- Initial State --\u0026gt;\r\n\u0026lt;div id=\"container\"\u0026gt;\r\n  \u0026lt;div class=\"wrapper\"\u0026gt;\r\n    \u0026lt;h1\u0026gt;ToDo App\u0026lt;/h1\u0026gt;\r\n    \u0026lt;form action=\"#\" class=\"addtodo-form\"\u0026gt;\r\n      \u0026lt;input class=\"input-todo\" type=\"text\" placeholder=\"Write your todo...\"\u0026gt;\r\n      \u0026lt;input type=\"submit\" value=\"Add Todo\"\u0026gt;\r\n    \u0026lt;/form\u0026gt;\r\n    \u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt;\r\n    \u0026lt;h2\u0026gt;Items to be done\u0026lt;/h2\u0026gt;\r\n    \u0026lt;br/\u0026gt;----\u0026lt;br/\u0026gt;\r\n    \u0026lt;ul\u0026gt;\r\n      \u0026lt;div class=\"no-todos\"\u0026gt;No Todos Available Yet\u0026lt;/div\u0026gt;\r\n    \u0026lt;/ul\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n\r\n\u0026lt;!-- After Adding a New Task 'Task 1' --\u0026gt;\r\n\u0026lt;ul\u0026gt;\r\n  \u0026lt;li\u0026gt;\r\n    \u0026lt;div class=\"text\"\u0026gt;Task 1\u0026lt;/div\u0026gt;\r\n    \u0026lt;input class=\"hidden\" type=\"text\" value=\"Task 1\"\u0026gt;\r\n    \u0026lt;div class=\"buttons\"\u0026gt;\r\n        \u0026lt;button class=\"update green\"\u0026gt;Update\u0026lt;/button\u0026gt;\r\n        \u0026lt;button class=\"delete\"\u0026gt;X\u0026lt;/button\u0026gt;\r\n        \u0026lt;button class=\"done\"\u0026gt;Complete\u0026lt;/button\u0026gt;\r\n    \u0026lt;/div\u0026gt;\r\n  \u0026lt;/li\u0026gt;\r\n  \u0026lt;div class=\"no-todos hidden\"\u0026gt;No Todos Available Yet\u0026lt;/div\u0026gt;\r\n\u0026lt;/ul\u0026gt;\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis project is an excellent opportunity to practice and showcase your ability to work with core web technologies and implement basic but crucial functionalities that are common in many web applications.\u003c/p\u003e\n",
        "slug": "todo-app",
        "date": "2024-03-16T18:59:11",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "App Design"
            ],
            "type": [
                "Vanilla"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "31. Top K Words",
        "content": "\u003cp\u003eWrite a function \u003ccode\u003etopKWords(log, k)\u003c/code\u003e that analyzes a given log file content and identifies the top K most frequently occurring words within it. The function should return an array containing these top K words, sorted by their frequency of occurrence in descending order.\u003c/p\u003e\n\u003cp\u003eFor instance, given a log:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\nMay 12, 2023: User1 logged in.\r\nMay 13, 2023: User2 logged in.\r\nMay 13, 2023: User1 performed an action.\r\nMay 14, 2023: User3 logged in.\r\nMay 15, 2023: User2 performed an action.\r\nMay 15, 2023: User1 logged out.\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eAnd a value of K = 3, the function \u003ccode\u003etopKWords(log, 3)\u003c/code\u003e should return:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e['User1', 'logged', 'May']\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis output represents the top 3 most frequently occurring words in the log, which are \u0026#8216;User1\u0026#8217;, \u0026#8216;logged\u0026#8217;, and \u0026#8216;May\u0026#8217; in this example.\u003c/p\u003e\n\u003cp\u003eThe function should process the log content to count word occurrences, then sort and return the most frequent words up to the specified limit of K.\u003c/p\u003e\n",
        "slug": "top-k-words",
        "date": "2024-03-14T15:47:34",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "Algorithmic"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "6. Total Salaries",
        "content": "\u003cp\u003eYou are tasked with implementing a function named \u003ccode\u003ecalculateTotalSalaries\u003c/code\u003e that will navigate through a company\u0026#8217;s hierarchical structure to calculate the cumulative sum of salaries for all employees. The company\u0026#8217;s structure is depicted as a nested object, where each node can either be a department containing further sub-departments or an array of employees. Each employee is represented by an object containing their name and salary.\u003c/p\u003e\n\u003cp\u003eThe main challenge lies in efficiently traversing this nested structure, which may vary in depth and complexity across different companies, to aggregate all the salary values. This problem not only tests your ability to work with nested data structures but also assesses your recursive thinking and problem-solving skills.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eInput:\u003c/strong\u003e A nested object representing the company\u0026#8217;s structure, where each department can contain sub-departments or an array of employees with their respective salaries.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e A single integer value representing the total sum of salaries of all employees across the entire company.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst company = {\r\n  sales: [\r\n    { name: \"John\", salary: 1000 },\r\n    { name: \"Alice\", salary: 1600 }\r\n  ],\r\n  development: {\r\n    sites: [\r\n      { name: \"Peter\", salary: 2000 },\r\n      { name: \"Alex\", salary: 1800 }\r\n    ],\r\n    internals: [\r\n      { name: \"Jack\", salary: 1300 }\r\n    ]\r\n  }\r\n};\r\nconst totalSalaries = calculateTotalSalaries(company);\r\nconsole.log(totalSalaries); // Output: 7700\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn this example, the function \u003ccode\u003ecalculateTotalSalaries\u003c/code\u003e navigates through each department and sub-department, summing up the salaries of \u0026#8220;John\u0026#8221;, \u0026#8220;Alice\u0026#8221;, \u0026#8220;Peter\u0026#8221;, \u0026#8220;Alex\u0026#8221;, and \u0026#8220;Jack\u0026#8221;, resulting in a total of 7700.\u003c/p\u003e\n\u003cp\u003eThis problem encapsulates a real-world scenario where understanding and manipulating nested data structures are crucial. It provides a foundation for more complex data processing tasks that are common in software development, especially in handling hierarchical data.\u003c/p\u003e\n",
        "slug": "total-salaries",
        "date": "2024-03-08T20:51:10",
        "featuredImage": null,
        "info": {
            "company": [
                "Google"
            ],
            "category": [
                "JSON"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "76. Transactions List",
        "content": "\u003cp\u003e\u003cimg loading=\"lazy\" decoding=\"async\" class=\"alignnone size-full wp-image-403\" src=\"https://api.frontendlead.com/wp-content/uploads/2024/03/Screenshot-2024-03-16-at-4.33.20-PM.png\" alt=\"\" width=\"234\" height=\"294\" /\u003e\u003c/p\u003e\n\u003cp\u003eYou are provided with a React application designed to manage and display a list of customer transactions. The primary functionalities of this application include:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRendering the Transaction List:\u003c/strong\u003e Displaying an initial list of transactions to the user, each containing an ID, the customer\u0026#8217;s name, and the transaction amount.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFiltering Transactions:\u003c/strong\u003e Allowing users to filter the transaction list by customer name through a text input field. The list updates in real-time based on the user\u0026#8217;s input, showing transactions that match the entered name (case-insensitively).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eHighlighting Top Customer\u0026#8217;s Transactions:\u003c/strong\u003e Identifying the customer with the highest total transaction amount across all their transactions. The application highlights transactions associated with this top customer in the list, making them easily distinguishable.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese features aim to enhance user experience by providing a clear and interactive way to manage and understand transaction data. Users can easily locate transactions for specific customers, and quickly identify which customer has the highest total transaction amount, thanks to the visual highlights applied to their transactions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eImplementation Example:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\nconst transactions = [\r\n  { id: \"t_101\", customer: \"Alice Anderson\", amount: 84 },\r\n  { id: \"t_102\", customer: \"Bob Brown\", amount: 30 },\r\n  // Additional transactions...\r\n];\r\n\r\nfunction TransactionsList({ transactions }) {\r\n  // Component logic...\r\n  return (\r\n    \u0026lt;div\u0026gt;\r\n      \u0026lt;input type=\"text\" onChange={/* Filter logic */} /\u0026gt;\r\n      \u0026lt;ul\u0026gt;\r\n        {transactions.map(transaction =\u0026gt; (\r\n          \u0026lt;li key={transaction.id}\u0026gt;\r\n            \u0026lt;span style={{ backgroundColor: /* Highlighting logic */ }}\u0026gt;\r\n              {transaction.customer}\r\n            \u0026lt;/span\u0026gt;\r\n            : {transaction.amount}\r\n          \u0026lt;/li\u0026gt;\r\n        ))}\r\n      \u0026lt;/ul\u0026gt;\r\n    \u0026lt;/div\u0026gt;\r\n  );\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis code snippet illustrates the basic structure and functionality of the React application, highlighting the key areas of rendering, filtering, and visual distinction of transactions. The actual logic for filtering and highlighting will depend on the user input and the aggregated transaction amounts per customer.\u003c/p\u003e\n",
        "slug": "transactions-list",
        "date": "2024-03-16T23:04:10",
        "featuredImage": null,
        "info": {
            "company": [
                "Stripe"
            ],
            "category": [
                "App Design"
            ],
            "type": [
                "React"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "16. Traverse DOM",
        "content": "\u003cp\u003eGiven a root node of a DOM tree, write a function to traverse the tree level by level and return an array of nodes in the order they are visited. This task simulates a breadth-first search (BFS) traversal of the Document Object Model (DOM), which is particularly useful for various web development tasks, such as manipulating or querying a webpage\u0026#8217;s structure.\u003c/p\u003e\n\u003cp\u003eThe function should take a single argument: the root node of the DOM tree to be traversed. It should return an array containing the nodes in the order they were visited during the traversal. The DOM tree can be visualized as a hierarchical structure of nodes, where each node represents an element in the webpage, and its children represent the nested elements within it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\nInput: Root node of a DOM tree representing the following HTML structure:\r\n\u0026lt;div\u0026gt;\r\n  \u0026lt;p\u0026gt;Paragraph 1\u0026lt;/p\u0026gt;\r\n  \u0026lt;div\u0026gt;\r\n    \u0026lt;p\u0026gt;Paragraph 2\u0026lt;/p\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n\r\nOutput: [div, p (Paragraph 1), div, p (Paragraph 2)]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis example illustrates a simple case where the function starts at the root \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e node, adds it to the results array, and then proceeds to its children, adding them to the array in the order they appear, level by level. The process continues until all nodes in the tree have been visited and added to the results array.\u003c/p\u003e\n\u003cp\u003eYour task is to implement this traversal function, ensuring that it accurately reflects the breadth-first search approach and correctly captures the structure of the DOM tree.\u003c/p\u003e\n",
        "slug": "traverse-dom",
        "date": "2024-03-15T19:15:46",
        "featuredImage": null,
        "info": {
            "company": [
                "Amazon"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Easy"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "2 weeks",
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "77. Trending Stocks",
        "content": "\u003cp\u003eYou are tasked with creating a function that retrieves information about trending stocks based on their market capitalization and prices. The goal is to identify the top \u003ccode\u003en\u003c/code\u003e trending stocks, where \u003ccode\u003en\u003c/code\u003e is a specified number, and return details about these stocks in a structured format. The function should return an array of objects, each encapsulating the symbol, name, market capitalization, and current price of these trending stocks.\u003c/p\u003e\n\u003cp\u003eThe challenge involves fetching data from three different APIs: one for stock symbols and names, another for market capitalizations, and the last one for current stock prices. The process is to first fetch the symbols and market caps, sort the stocks by market cap in descending order, pick the top \u003ccode\u003en\u003c/code\u003e stocks, and then fetch their current prices. Finally, the information is aggregated into a single array of objects that contain all the necessary details for each selected stock.\u003c/p\u003e\n\u003ch3\u003eExample:\u003c/h3\u003e\n\u003cp\u003eConsider you want to find the top 2 trending stocks. The function will sort all available stocks based on their market capitalization and return the details for the top 2.\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eInput: n = 2\r\n\r\nOutput:\r\n[\r\n  { \"symbol\": \"MMM\", \"name\": \"3M Company\", \"market-cap\": 138721055226, \"price\": 1001.52 },\r\n  { \"symbol\": \"ABT\", \"name\": \"Abbott Laboratories\", \"market-cap\": 102121042306, \"price\": 1001.52 }\r\n]\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function encapsulates a complex process of asynchronous API calls, data sorting, and aggregation, presenting a streamlined solution to the user. This task not only tests your proficiency with asynchronous JavaScript operations but also your ability to work with external data sources and transform data to fit specific requirements.\u003c/p\u003e\n\u003cp\u003eThis challenge serves as an excellent real-world scenario for frontend developers, especially for those interested in financial technologies or stock market applications, providing both a technical challenge and an insight into financial data manipulation.\u003c/p\u003e\n",
        "slug": "trending-stocks",
        "date": "2024-03-08T18:00:04",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook",
                "Amazon",
                "Google",
                "Microsoft",
                "Netflix",
                "Apple"
            ],
            "category": [
                "JSON"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "33. Virtual DOM I",
        "content": "\u003cp\u003eExplore the concept of serializing and deserializing a DOM tree using JSON, similar to how React represents elements and their properties. This approach offers an alternative to traditional HTML string serialization, providing a structured and easily manipulable format for representing the DOM structure.\u003c/p\u003e\n\u003cp\u003eConsider the following example of a DOM tree:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"root\"\u0026gt;\r\n   \u0026lt;h1\u0026gt;\r\n     this is\r\n   \u0026lt;/h1\u0026gt;\r\n   \u0026lt;p class=\"paragraph\"\u0026gt;\r\n     a\r\n     \u0026lt;button\u0026gt;\r\n       button\r\n     \u0026lt;/button\u0026gt;\r\n     from\r\n     \u0026lt;a href=\"https://frontendlead.com\"\u0026gt;\r\n       \u0026lt;b\u0026gt;frontendlead\u0026lt;/b\u0026gt;\r\n       .com\r\n     \u0026lt;/a\u0026gt;\r\n   \u0026lt;/p\u0026gt;\r\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe object representation of this DOM tree might look like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\r\n  type: 'div',\r\n  props: {\r\n    children: [{\r\n      type: 'h1',\r\n      props: {\r\n        children: ' this is '\r\n      }\r\n    }, {\r\n      type: 'p',\r\n      props: {\r\n        className: 'paragraph',\r\n        children: [' a ', {\r\n          type: 'button',\r\n          props: {\r\n            children: ' button '\r\n          }\r\n        }, ' from ', {\r\n          type: 'a',\r\n          props: {\r\n            href: 'https://frontendlead.com',\r\n            children: [{\r\n              type: 'b',\r\n              props: {\r\n                children: 'frontendlead'\r\n              }\r\n            }, '.com']\r\n          }\r\n        }]\r\n      }\r\n    }]\r\n  }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour task is to implement two functions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003evirtualize():\u003c/strong\u003e Converts a real DOM tree into its JSON representation.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003erender():\u003c/strong\u003e Recreates the real DOM tree from its JSON representation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFocus on basic HTML tags and properties, excluding complex functionalities like event handlers and custom components. The ability to handle text nodes, single or multiple children, and camelCased properties in your implementation is essential.\u003c/p\u003e\n\u003cp\u003eThis challenge not only tests your understanding of DOM manipulation and JavaScript object handling but also offers insight into virtual DOM concepts used in frameworks like React.\u003c/p\u003e\n",
        "slug": "virtual-dom-i",
        "date": "2024-03-14T23:46:38",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/lE0CE2N3oUg"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "34. Virtual DOM II",
        "content": "\u003cp\u003eBuilding on the concept of Virtual DOM introduced in Virtual DOM I, this challenge involves transforming a virtualized JSON representation of a DOM tree back into a valid DOM structure. The process should accurately recreate the DOM elements, including their attributes and nested structure, from the virtual representation.\u003c/p\u003e\n\u003cp\u003eGiven a virtual DOM representation like:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\r\n  \"type\": \"div\",\r\n  \"props\": {\r\n    \"children\": [{\r\n      \"type\": \"h1\",\r\n      \"props\": {\r\n        \"children\": \"this is\"\r\n      }\r\n    }, {\r\n      \"type\": \"p\",\r\n      \"props\": {\r\n        \"className\": \"paragraph\",\r\n        \"children\": [\"a \", {\r\n          \"type\": \"button\",\r\n          \"props\": {\r\n            \"children\": \"button\"\r\n          }\r\n        }, \" from\", {\r\n          \"type\": \"a\",\r\n          \"props\": {\r\n            \"href\": \"https://frontendlead.com\",\r\n            \"children\": [{\r\n              \"type\": \"b\",\r\n              \"props\": {\r\n                \"children\": \"frontendlead\"\r\n              }\r\n            }, \".com\"]\r\n          }\r\n        }]\r\n      }\r\n    }]\r\n  }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eYour task is to implement a function \u003ccode\u003erender()\u003c/code\u003e that takes this object literal representation of a DOM tree and recreates the corresponding real DOM tree, as shown below:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;div id=\"root\"\u0026gt;\r\n   \u0026lt;h1\u0026gt;\r\n     this is\r\n   \u0026lt;/h1\u0026gt;\r\n   \u0026lt;p class=\"paragraph\"\u0026gt;\r\n     a\r\n     \u0026lt;button\u0026gt;\r\n       button\r\n     \u0026lt;/button\u0026gt;\r\n     from\r\n     \u0026lt;a href=\"https://frontendlead.com\"\u0026gt;\r\n       \u0026lt;b\u0026gt;frontendlead\u0026lt;/b\u0026gt;\r\n       .com\r\n     \u0026lt;/a\u0026gt;\r\n   \u0026lt;/p\u0026gt;\r\n\u0026lt;/div\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe function should support basic HTML tags and properties, including the handling of text nodes, single or multiple children, and camelCased properties like \u003ccode\u003eclassName\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis challenge tests your understanding of DOM manipulation, recursion, and the concept of a virtual DOM, highlighting the algorithmic approach to rendering web interfaces.\u003c/p\u003e\n",
        "slug": "virtual-dom-ii",
        "date": "2024-03-15T00:02:11",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/5DIxFGFG1e4"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "1 month",
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "35. Virtual DOM III",
        "content": "\u003cp\u003eBuild a JSX-like compiler that transforms a given string representing HTML code into a JavaScript object representation. The compiler should parse the HTML-like string and extract the tag name, attributes (if any), and children content. Consider the following input string:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026lt;a\u0026gt;frontendlead.com\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe expected output for the above input should be:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e{\r\n \"openingElement\": {\r\n  \"name\": \"a\"\r\n },\r\n \"closingElement\": {\r\n  \"name\": \"a\"\r\n },\r\n \"props\": {\r\n  \"children\": [\r\n   \"frontendlead.com\"\r\n  ]\r\n }\r\n}\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe compiler must handle various cases, including strings with extra spaces, and ensure proper tag formatting. For instance, the following examples should be successfully parsed:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;a\u0026gt;bfe.dev\u0026lt;/a\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt; a \u0026gt; bfe.dev \u0026lt; / a \u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, certain inputs should trigger parsing errors, such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIncorrect tag formats like \u003ccode\u003e'2a\u0026gt;bfe.dev\u0026lt;/a\u0026gt;'\u003c/code\u003e or \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026lt;/b\u0026gt;'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eStrings that do not strictly follow the tag structure, e.g., \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026gt;\u0026lt;/a\u0026gt;'\u003c/code\u003e, \u003ccode\u003e'\u0026lt;a\u0026gt;\u0026lt;a\u0026gt;'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUnmatched opening and closing tags or misplaced characters within tags\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis challenge aims to assess your ability to parse and transform string data, manage errors, and construct object representations, which are essential skills in front-end development and working with virtual DOM concepts.\u003c/p\u003e\n",
        "slug": "virtual-dom-iii",
        "date": "2024-03-15T00:27:23",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Hard"
            ],
            "videoLink": {
                "url": "https://www.youtube.com/embed/pIpYNP_lIv0"
            },
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "3 months",
                "6 months"
            ]
        }
    },
    {
        "title": "60. getElementsByClassName",
        "content": "\u003cp\u003eImplement a function \u003ccode\u003egetElementsByClassName\u003c/code\u003e that mimics the behavior of the native DOM method \u003ccode\u003edocument.getElementsByClassName\u003c/code\u003e. The function should search through a DOM tree starting from a specified root element and collect all elements that have the specified class name.\u003c/p\u003e\n\u003cp\u003eThe function \u003ccode\u003egetElementsByClassName(className, root)\u003c/code\u003e takes two parameters: \u003ccode\u003eclassName\u003c/code\u003e, which is the name of the class to search for, and \u003ccode\u003eroot\u003c/code\u003e, which is the root element of the DOM subtree in which to begin the search. If the root element is not provided, the search should not proceed.\u003c/p\u003e\n\u003cp\u003eThe function should return an array of DOM elements that match the specified class name. If no elements are found, the function should return an empty array. The search should include the root element and should be performed depth-first, ensuring that all descendants of the root are considered.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample:\u003c/strong\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\r\n// Assuming an HTML structure like:\r\n// \u0026lt;div class=\"container\"\u0026gt;\r\n//   \u0026lt;div class=\"item active\"\u0026gt;\u0026lt;/div\u0026gt;\r\n//   \u0026lt;div class=\"item\"\u0026gt;\u0026lt;/div\u0026gt;\r\n//   \u0026lt;div class=\"list\"\u0026gt;\r\n//     \u0026lt;div class=\"item active\"\u0026gt;\u0026lt;/div\u0026gt;\r\n//   \u0026lt;/div\u0026gt;\r\n// \u0026lt;/div\u0026gt;\r\n\r\nconst rootElement = document.querySelector('.container');\r\nconst itemsWithActiveClass = getElementsByClassName('active', rootElement);\r\n\r\n// itemsWithActiveClass should contain the two '.item.active' divs\r\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis task requires traversing the DOM tree and applying conditional logic to select elements based on their class name, which is a common requirement in many frontend development tasks. Implementing this function will deepen your understanding of DOM manipulation and element selection.\u003c/p\u003e\n",
        "slug": "getelementsbyclassname",
        "date": "2024-03-15T23:23:30",
        "featuredImage": null,
        "info": {
            "company": [
                "Facebook"
            ],
            "category": [
                "DOM API"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    },
    {
        "title": "67. querySelectorAll",
        "content": "\u003cp\u003eThe \u003ccode\u003equerySelectorAll\u003c/code\u003e method is an essential tool in web development, enabling developers to select elements from the DOM (Document Object Model) that match specific CSS selectors. This method simplifies the process of manipulating HTML documents by allowing for the selection of elements based on class names, IDs, attributes, and more, mirroring the flexibility of CSS.\u003c/p\u003e\n\u003cp\u003eIn this exercise, we aim to create a simplified version of \u003ccode\u003equerySelectorAll\u003c/code\u003e. This custom function, \u003ccode\u003equerySelectorAll\u003c/code\u003e, will be designed to traverse the DOM tree and collect elements that match a given CSS selector. The function will begin its search from a specified node (defaulting to the document\u0026#8217;s root) and explore child nodes recursively to find matches.\u003c/p\u003e\n\u003ch3\u003eFunction Signature\u003c/h3\u003e\n\u003cp\u003eOur simplified \u003ccode\u003equerySelectorAll\u003c/code\u003e function has the following signature:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003efunction querySelectorAll(selector, node = document)\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eselector\u003c/code\u003e: A string representing the CSS selector to match against.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enode\u003c/code\u003e: The root node from where the search should start. It defaults to the document if not provided.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eImplementation Details\u003c/h3\u003e\n\u003cp\u003eThe function works by recursively traversing the DOM tree from the given node, checking each node against the provided CSS selector. If a node matches the selector, it is added to an array of elements. This array is eventually returned, containing all elements that matched the selector.\u003c/p\u003e\n\u003cp\u003eHere\u0026#8217;s a step-by-step breakdown of the function\u0026#8217;s logic:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInitialize an empty array \u003ccode\u003eelements\u003c/code\u003e to store the matching elements.\u003c/li\u003e\n\u003cli\u003eDefine a \u003ccode\u003etraverse\u003c/code\u003e function that will recursively explore each node in the DOM tree.\n\u003cul\u003e\n\u003cli\u003eIf the current node matches the provided CSS selector (using the \u003ccode\u003ematches\u003c/code\u003e method), it is added to the \u003ccode\u003eelements\u003c/code\u003e array.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003etraverse\u003c/code\u003e function is then called on each child node of the current node, allowing the function to search deeper into the DOM tree.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003etraverse\u003c/code\u003e function is initially called with the starting node, kicking off the recursive search.\u003c/li\u003e\n\u003cli\u003eOnce the entire tree has been explored, the \u003ccode\u003eelements\u003c/code\u003e array, now potentially populated with matching elements, is returned.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3\u003eUsage Examples\u003c/h3\u003e\n\u003cp\u003eThe custom \u003ccode\u003equerySelectorAll\u003c/code\u003e function can be used in various scenarios, similar to the native method. Here are some examples:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTo select all paragraph (\u003ccode\u003e\u0026lt;p\u0026gt;\u003c/code\u003e) elements within the document:\n\u003cpre\u003e\u003ccode\u003econst paragraphs = querySelectorAll('p');\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003eTo find all \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e elements within a specific container:\n\u003cpre\u003e\u003ccode\u003econst container = document.getElementById('container');\r\nconst divsInContainer = querySelectorAll('div', container);\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003cli\u003eTo locate elements with a specific class within a container:\n\u003cpre\u003e\u003ccode\u003econst elementsWithClass = querySelectorAll('.my-class', container);\u003c/code\u003e\u003c/pre\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eLimitations and Considerations\u003c/h3\u003e\n\u003cp\u003eWhile our simplified \u003ccode\u003equerySelectorAll\u003c/code\u003e function demonstrates the core concept of DOM traversal and element selection, it is not as optimized or feature-rich as the native implementation. The actual \u003ccode\u003equerySelectorAll\u003c/code\u003e method provided by browsers supports a wide range of CSS selectors and includes optimizations for performance. Therefore, our function serves as an educational tool to understand the underlying principles rather than a replacement for the native method.\u003c/p\u003e\n\u003cp\u003eBy building and understanding this simplified version of \u003ccode\u003equerySelectorAll\u003c/code\u003e, developers can gain insights into how DOM traversal works and how elements are programmatically selected and manipulated in web development.\u003c/p\u003e\n",
        "slug": "build-your-own-queryselectorall-javascript-guide",
        "date": "2024-03-10T17:22:45",
        "featuredImage": null,
        "info": {
            "company": null,
            "category": [
                "Javascript"
            ],
            "type": [
                "Coding"
            ]
        },
        "common": {
            "difficulty": [
                "Medium"
            ],
            "videoLink": null,
            "comingSoon": false,
            "subtitle": null,
            "premiumQuestion": true,
            "studyPlan": [
                "6 months"
            ]
        }
    }
]
